#include "FullPoisson2D_Tunables.pbcc"

transform CAT(FullPoisson2D_Inner_Prec,CURPREC)
from X[n,n], B[n,n]
to  Y[n,n]
through zeros[(n+1)/2,(n+1)/2]
{
  //base case: directly solve with BS
  to(Y y) from(X x, B b) {
    int level = (int) log2(n-1);
    if (level > 8) {
      HecuraRuntime::abort();
    }
//    printf("prec%d BS case called for level %d\n", CURPREC, level);
    BS2D(y, x, b);
  }

  //solve recursively on coarser grids, with zero initial guess
  //then map the coarse solution back to the fine grid by Interpolation
  zeros.cell(i,j) from() {
    return 0;
  }

  //recursive cases

#define ESTPREC 0
#include "FullPoisson2D_PerEst.pbcc"
#undef ESTPREC
#define ESTPREC 1
#include "FullPoisson2D_PerEst.pbcc"
#undef ESTPREC
#define ESTPREC 2
#include "FullPoisson2D_PerEst.pbcc"
#undef ESTPREC
#define ESTPREC 3
#include "FullPoisson2D_PerEst.pbcc"
#undef ESTPREC
#define ESTPREC 4
#include "FullPoisson2D_PerEst.pbcc"
#undef ESTPREC
#define ESTPREC 5
#include "FullPoisson2D_PerEst.pbcc"
#undef ESTPREC

}

