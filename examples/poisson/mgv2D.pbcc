#ifndef MGV2D_PBCC
#define MGV2D_PBCC

//Multigrid V-cycle 2D
//assume dimension n = 2^k + 1
#include "../add.pbcc"
#include "../utilities.pbcc"
#include "Interpolate2Dnew.pbcc"
#include "Restrict2Dnew.pbcc"
#include "Residual2D.pbcc"
#include "SOR2D.pbcc"

transform mgv2D_inner 
from X[n,n], B[n,n]
to  Y[n,n]
through zeros[(n+1)/2,(n+1)/2]
{
    //solve recursively on coarser grids, with zero initial guess
    //then map the coarse solution back to the fine grid by Interpolation
    zeros.cell(i,j) from() {
        return 0;
    }

    //recursive case
    recursive(n / 2)
    to (Y y) from(X x, B b, zeros z) {
        JASSERT(floor(log2(n-1)) == log2(n-1)).Text("input must be 2^k+1");
        if (n == 3) {
//          printf("base case called for n = 3\n");
          Copy2D(y, x);
          y.cell(1, 1) = (x.cell(1, 0) + x.cell(0, 1) + x.cell(1, 2) + x.cell(2, 1) + b.cell(1, 1)) / 4;
        } else {
//          printf("recursive case called for n = %d\n", n);
          MatrixRegion2D t, r;
          t = SOR2D(x, b, -2, 1);
          r = Restrict2Dnew(Residual2D(t,b));
          r = mgv2D_inner(z,r);
          t = MatrixAdd(Interpolate2Dnew(r), t);
          SOR2D(y, t, b, -2, 1);
        }
    }
}

transform mgv2D 
from X[n,n], B[n,n], numIterations
to Y[n,n]
{
  to (Y y) from (X x, B b, numIterations num)
  {
    if (num > 0) {
      mgv2D_inner(y, x, b);
    } else {
      Copy2D(y, x);
    }
    if (num > 1)
      mgv2D(y, y, b, num - 1);
  }
}

#endif // MGV2D_PBCC

