#ifndef JACOBI2DGRAPH_PBCC
#define JACOBI2DGRAPH_PBCC

#include "Jacobi2D.pbcc"

#define PRECISION1
#define MAX_LEVEL 9

transform Jacobi2DGraph
from IN[n+2,n+2], B[n+2,n+2]
to OUT[n+2,n+2]
{
  recursive
  to (OUT o) from (IN in, B b)
  {

#ifdef PRECISION1
    int iters[MAX_LEVEL + 1] = {1, 1, 6, 28, 119, 476, 1908, 7628, 30513, 1};
#endif

#ifdef PRECISION2
    int iters[MAX_LEVEL + 1] = {1, 1, 13, 57, 237, 953, 3818, 15272, 61092, 1};
#endif

#ifdef PRECISION3
    int iters[MAX_LEVEL + 1] = {1, 1, 19, 86, 356, 1430, 5729, 22916, 91670, 1};
#endif

#ifdef PRECISION4
    int iters[MAX_LEVEL + 1] = {1, 1, 26, 115, 475, 1907, 7639, 30560, 122249, 1};
#endif

#ifdef PRECISION5
    int iters[MAX_LEVEL + 1] = {1, 1, 33, 144, 593, 2384, 9550, 38204, 152827, 1};
#endif

#ifdef PRECISION7
    int iters[MAX_LEVEL + 1] = {1, 1};
#endif

#ifdef PRECISION9
    int iters[MAX_LEVEL + 1] = {1, 1};
#endif

#ifdef PRECISION10
    int iters[MAX_LEVEL + 1] = {1, 1};
#endif

#ifdef PRECISION13
    int iters[MAX_LEVEL + 1] = {1, 1};
#endif

//    printf("Using %d iterations\n", iters[(int) log2(n)]);
    SPAWN(Jacobi2D, o, in, b, iters[(int) log2(n)]);
  }
}

#endif // JACOBI2DGRAPH_PBCC

