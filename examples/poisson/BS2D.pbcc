%{

extern "C" void dposv_(char *uplo, int *n, int *nrhs, double *A, int *lda, double *B, int *ldb, int *info);

void initDiagBlock(double *A, int n)
{
  int nSquared = n * n;
  A[0] = 4;
  for (int i = 1; i < n; i++) {
    A[i * nSquared + i] = 4;
    A[i * nSquared + (i - 1)] = -1;
    A[(i - 1) * nSquared + i] = -1;
  }
}

void initOffDiagBlock(double *A, int n)
{
  int nSquared = n * n;
  for (int i = 0; i < n; i++) {
    A[i * nSquared + i] = -1;
  }
}

void displayMatrix(double *A, int n)
{
  for (int j = 0; j < n; j++) {
    for (int i = 0; i < n; i++) {
      printf("%3g", A[i * n + j]);
    }
    printf("\n");
  }
  printf("\n");
}

%}

transform BS2D
from B[n,n]
to OUT[n,n]
{

  to (OUT out) from (B b)
  {
    char uplo = 'U';
    int nrhs = 1, nSquared = n * n, info = 0;

    // allocate and initialize solver matrix
    double *A = (double *) malloc(n * n * n * n * sizeof(double));
    initDiagBlock(A, n);
    for (int j = 1; j < n; j++) {
      initDiagBlock(A + (j * nSquared + j) * n, n);
      initOffDiagBlock(A + (j * nSquared + (j - 1)) * n, n);
      initOffDiagBlock(A + ((j - 1) * nSquared + j) * n, n);
    }
/*
    printf("A:\n");
    displayMatrix(A, nSquared);
*/
    memcpy(out.base(), b.base(), nSquared * sizeof(double));

    // call LAPACK to do linear solve
    dposv_(&uplo, &nSquared, &nrhs, A, &nSquared, out.base(), &nSquared, &info);

    free(A);
  }

}

