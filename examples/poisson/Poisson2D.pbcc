//Multigrid V-cycle 2D
//assume dimension n = 2^k + 1

#include "../add.pbcc"
#include "Interpolate2Dnew.pbcc"
#include "Restrict2Dnew.pbcc"
#include "Residual2D.pbcc"
#include "SOR2D.pbcc"
#include "BS2D.pbcc"
#include "mgv2D.pbcc"
#include "ComputeError.pbcc"

#define CAT( a, b) _CAT(a,b)
#define _CAT( a, b) __CAT(a ## b)
#define __CAT(ab) ab

#define POISSON_PRECISION_1 0.8
#define POISSON_PRECISION_2 0.4
#define POISSON_PRECISION_3 0.2
#define POISSON_PRECISION_4 0.1
#define POISSON_PRECISION_5 0.05

#define CURPREC 1
#include "Poisson2D_InnerTransform.pbcc"
#undef CURPREC
#define CURPREC 2
#include "Poisson2D_InnerTransform.pbcc"
#undef CURPREC
#define CURPREC 3
#include "Poisson2D_InnerTransform.pbcc"
#undef CURPREC
#define CURPREC 4
#include "Poisson2D_InnerTransform.pbcc"
#undef CURPREC
#define CURPREC 5
#include "Poisson2D_InnerTransform.pbcc"
#undef CURPREC

transform Poisson2D
from X[n,n], B[n,n]
to  Y[n,n]
through zeros[(n+1)/2,(n+1)/2]
{
  zeros.cell(i,j) from() {
    return 0;
  }

  to (Y y) from (X x, B b, zeros z)
  {
    double error, newError, oldError, change;
    int level = (int) log2(n-1);
    MatrixRegion2D t, r;

    JASSERT(floor(log2(n-1)) == log2(n-1))(n)(floor(log2(n-1)))(log2(n-1)).Text("input must be 2^k+1");
    JASSERT(n > 1)(n).Text("input must be larger than 1");

    if (HecuraRuntime::isTrainingRun()) {
      printf("Training run for level %d\n", level);
      MatrixRegion2D actual;
      if (level < 4) {
        actual = BS2D(x, b);
      } else {
        actual = mgv2D(x, b, 15);
      }
      error = (double) ComputeError(x, actual);
      printf("initial error = %g\n", error);

#define CURPREC 1
#include "Poisson2D_TrainingLoop.pbcc"
#undef CURPREC
#define CURPREC 2
#include "Poisson2D_TrainingLoop.pbcc"
#undef CURPREC
#define CURPREC 3
#include "Poisson2D_TrainingLoop.pbcc"
#undef CURPREC
#define CURPREC 4
#include "Poisson2D_TrainingLoop.pbcc"
#undef CURPREC
#define CURPREC 5
#include "Poisson2D_TrainingLoop.pbcc"
#undef CURPREC

    } else {
#define CURPREC 4
      printf("Timing run for level %d, precision %g\n", level, CAT(POISSON_PRECISION_, CURPREC));
      CAT(Poisson2D_Inner_Prec, CURPREC)(y, x, b);
#undef CURPREC
    }
  }
}

