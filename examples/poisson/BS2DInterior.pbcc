%{

extern "C" void dposv_(char *uplo, int *n, int *nrhs, double *A, int *lda, double *B, int *ldb, int *info);

void initDiagBlock(double *A, int n)
{
  int nSquared = n * n;
  A[0] = 4;
  for (int i = 1; i < n; i++) {
    A[i * nSquared + i] = 4;
    A[i * nSquared + (i - 1)] = -1;
    A[(i - 1) * nSquared + i] = -1;
  }
}

void initOffDiagBlock(double *A, int n)
{
  int nSquared = n * n;
  for (int i = 0; i < n; i++) {
    A[i * nSquared + i] = -1;
  }
}

void displayMatrix(double *A, int n)
{
  for (int j = 0; j < n; j++) {
    for (int i = 0; i < n; i++) {
      printf("%3g", A[i * n + j]);
    }
    printf("\n");
  }
  printf("\n");
}

%}

transform BS2DInterior
from B[n,n]
to OUT[n,n]
{

  to (OUT out) from (B b)
  {
    char uplo = 'U';
    int nrhs = 1, nSquared = n * n, info = 0;

    // allocate and initialize solver matrix
    double *A = new double[n * n * n * n];
    double *bFlat = new double[n * n];
    initDiagBlock(A, n);
    for (int i = 1; i < n; i++) {
      initDiagBlock(A + (i * nSquared + i) * n, n);
      initOffDiagBlock(A + (i * nSquared + (i - 1)) * n, n);
      initOffDiagBlock(A + ((i - 1) * nSquared + i) * n, n);
    }

    // intialize flat RHS/solution vector
    int index = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        bFlat[index++] = b.cell(i, j);
      }
    }

    // call LAPACK to do linear solve
    dposv_(&uplo, &nSquared, &nrhs, A, &nSquared, bFlat, &nSquared, &info);

    // copy solution to output
    index = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        out.cell(i, j) = bFlat[index++];
      }
    }

    delete [] A;
    delete [] bFlat;
  }

}

