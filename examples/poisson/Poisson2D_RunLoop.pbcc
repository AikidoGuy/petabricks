  // precision LOCALPREC
  recursive(n)
  to (Y y) from(X x, B b, zeros z) {
    int level = (int) log2(n - 1);
    printf("prec%d recursive case (call to prec%d) called for level %d (%d iterations)\n", 
        CURPREC, LOCALPREC, level,
        (int) CAT(CAT(CAT(prec, LOCALPREC), Iters_Prec), CURPREC)[level]);
    if (level <= 1) {
      printf("  aborting\n");
      HecuraRuntime::abort();
    } else {
      int i, level = (int) log2(n-1);
      if ((int) CAT(CAT(CAT(prec, LOCALPREC), Iters_Prec), CURPREC)[level] == -1) {
        printf("  aborting\n");
        HecuraRuntime::abort();
      }
      MatrixRegion2D t, r;

      Copy2D(y, x);
      for (i = 0; i < CAT(CAT(CAT(prec, LOCALPREC), Iters_Prec), CURPREC)[level]; i++) {
        t = SOR2D(y, b, -2, 1);
        r = Restrict2Dnew(Residual2D(t,b));
        r = CAT(Poisson2D_Inner_Prec, LOCALPREC)(z,r);
        t = MatrixAdd(Interpolate2Dnew(r), t);
        SOR2D(y, t, b, -2, 1);
      }
    }
  }

