#ifndef TRAINMGV2D_PBCC
#define TRAINMGV2D_PBCC
#include "BS2D.pbcc"
#include "ComputeError.pbcc"
#include "mgv2D.pbcc"
#include "Func2D.pbcc"

transform trainmgv2D
from X[n,n], ACTUAL[n,n]
through zeros[(n+1)/2,(n+1)/2]
to Y[n,n]
{
  zeros.cell(i,j) from() {
    return 0;
  }

  recursive
  to (Y y) from (X x, ACTUAL actual, zeros z)
  {
    double error;
    double estimateError;
    double newError;
    double oldError;
    double change;
//    double prec[5] = {1e-1, 1e-3, 1e-5, 1e-7, 1e-9};
    double prec[5];
    prec[0] = 0.1;
    prec[1] = 0.001;
    prec[2] = 0.00001;
    prec[3] = 0.0000001;
    prec[4] = 0.000000001;

    int level = (int) log2(n-1);
    int iterations = 0;
    int ptr = 0;
//    int result[5] = {0, 0, 0, 0, 0};
    int result[5];
    result[0] = 0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;

    printf("Accuracy levels: (%g, %g, %g, %g, %g)\n",
        prec[0], prec[1], prec[2], prec[3], prec[4]);

    printf("Training run for level %d\n", level);
    MatrixRegion2D b = MatrixRegion2D::allocate(n,n);
    Func2D(b, actual);

    // y is our working guess
    Copy2D(y, x);

    // initialize borders of y to true values
    Copy2D(y.region(0,0,n,1), actual.region(0,0,n,1));
    Copy2D(y.region(0,n-1,n,n), actual.region(0,n-1,n,n));
    Copy2D(y.region(0,0,1,n), actual.region(0,0,1,n));
    Copy2D(y.region(n-1,0,n,n), actual.region(n-1,0,n,n));

    ComputeError(error, y, actual);
    printf("initial error = %g\n", error);

    newError = error;
    oldError = error;
    change = 0;
    while (newError / error > prec[4] && (iterations < 5 || change < 1)) {
      iterations++;
      mgv2D(y, y, b, 1);
      ComputeError(newError, y, actual);
      change = newError / oldError;
      oldError = newError;
      printf("%d: error = %g, ratio = %g\n",
          iterations, newError, newError / error);
      while (ptr < 5 && newError / error <= prec[ptr]) {
        result[ptr++] = iterations;
      }
    }
    if (change >= 1) {
      printf("Failure to converge to highest specified precision\n");
    }
    printf("Level %d: {%d, %d, %d, %d, %d}\n", level, 
        result[0], result[1], result[2], result[3], result[4], result[5]);
  }
}

#endif // TRAINMGV2D_PBCC

