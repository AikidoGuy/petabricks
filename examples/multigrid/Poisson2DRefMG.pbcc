#ifndef POISSON2DREFMG_PBCC
#define POISSON2DREFMG_PBCC

//Multigrid V-cycle 2D
//assume dimension n = 2^k + 1

#include "../simple/add.pbcc"
#include "../simple/copy.pbcc"
#include "Interpolate2Dnew.pbcc"
#include "Restrict2Dnew.pbcc"
#include "Poisson2DResidual.pbcc"
#include "Poisson2DSOR.pbcc"
#include "Poisson2DAccuracyMetric.pbcc"

// Helper function that computes a single reference V-cycle
//
// Performance note: Y can point to the same matrix region as X
transform Poisson2DRefMGInner
from X[n,n], B[n,n]
to  Y[n,n]
through zeros[(n+1)/2,(n+1)/2]
{
    zeros.cell(i,j) from() {
        return 0;
    }

    //solve recursively on coarser grids, with zero initial guess
    //then map the coarse solution back to the fine grid by Interpolation
    to (Y y) from(X x, B b, zeros z) {
        JASSERT(floor(log2(n-1)) == log2(n-1))(n).Text("input must be 2^k+1");
        if (n == 3) {

#ifdef DEBUG
          printf("base case called for n = 3\n");
#endif

          Copy2D(y, x);
          y.cell(1, 1) = (x.cell(1, 0) + x.cell(0, 1) +
                          x.cell(1, 2) + x.cell(2, 1) + b.cell(1, 1)) / 4;

        } else {

#ifdef DEBUG
          printf("recursive case called for n = %d\n", n);
#endif

          MatrixRegion2D t1 = MatrixRegion2D::allocate(n, n);
          MatrixRegion2D t2 = MatrixRegion2D::allocate(n, n);
          MatrixRegion2D r1 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);
          MatrixRegion2D r2 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);

          Poisson2DSOR(t1, x, b, -2, 1);  // t1 gets relaxed guess
          Poisson2DResidual(t2, t1, b);   // t2 gets new residual
          Restrict2Dnew(r1, t2);          // r1 gets restricted residual
          Poisson2DRefMGInner(r2, z, r1); // r2 gets coarse update
          Interpolate2Dnew(t2, r2);       // t2 gets interpolated update
          MatrixAdd(t2, t2, t1);          // t2 gets updated guess
          Poisson2DSOR(y, t2, b, -2, 1);  //  y gets relaxed guess
        }
    }
}

// Variable-accuracy transform that computes enough reference V-cycles to
// achieve target accuracy.
//
// Performance note: Y can point to the same matrix region as X
transform Poisson2DRefMG
from X[n,n], B[n,n]
to Y[n,n]
accuracy_bins 10 1000 100000 10000000 1000000000
accuracy_variable numIterations
accuracy_metric Poisson2DAccuracyMetric
{
    to (Y y) from (X x, B b)
    {
        JASSERT(numIters >= 0)(numIters).Text("num iterations must be non-negative");
        if (numIterations == 0) {
            Copy2D(y, x);
        } else {
            Poisson2DRefMGInner(y, x, b);
            for (int i = 1; i < numIterations; i++) {
                Poisson2DRefMGInner(y, y, b);
            }
        }
    }
}

#endif // POISSON2DREFMG_PBCC
