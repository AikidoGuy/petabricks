#ifndef POISSON2DREFFMG_PBCC
#define POISSON2DREFFMG_PBCC

#include "../simple/add.pbcc"
#include "../simple/copy.pbcc"
#include "Interpolate2Dnew.pbcc"
#include "Restrict2Dnew.pbcc"
#include "Poisson2DResidual.pbcc"
#include "Poisson2DSOR.pbcc"
#include "Poisson2DAccuracyMetric.pbcc"

// Helper function that recursively computes an estimation cycle of full multigrid.
//
// Performance note: Y can point to the same matrix region as X
transform Poisson2DRefFMGInner
from X[n,n], B[n,n], NumIters
through Z[(n+1)/2,(n+1)/2]
to  Y[n,n]
{
    Z.cell(i,j) from() {
        return 0;
    }

    //solve recursively on coarser grids, with zero initial guess
    //then map the coarse solution back to the fine grid by Interpolation
    to (Y y) from(X x, B b, Z z, NumIters numIters) {
        JASSERT(floor(log2(n-1)) == log2(n-1))(n).Text("input must be 2^k+1");
        JASSERT(numIters >= 0)(numIters).Text("num iterations must be non-negative");
        if (n == 3) {

#ifdef DEBUG
            printf("base case called for n = 3\n");
#endif

            Copy2D(y, x);
            y.cell(1, 1) = (x.cell(1, 0) + x.cell(0, 1) +
                            x.cell(1, 2) + x.cell(2, 1) + b.cell(1, 1)) / 4;

        } else {

#ifdef DEBUG
            printf("recursive case called for n = %d\n", n);
#endif

            MatrixRegion2D t2 = MatrixRegion2D::allocate(n, n);
            MatrixRegion2D r1 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);
            MatrixRegion2D r2 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);

            // do recursive estimation
            Poisson2DResidual(t2, x, b);        // t2 gets residual
            Restrict2Dnew(r1, t2);              // r1 gets restricted residual
            Poisson2DRefFMGInner(r2, z, r1, 1); // r2 gets coarse update
            Interpolate2Dnew(t2, r2);           // t2 gets interpolated update
            MatrixAdd(y, t2, x);                //  y gets updated guess

            // do reference V-cycles for numIters iterations
            if (numIters > 0) {
                Poisson2DRefMG(y, y, b, numIters); //  y gets iterated with V-cycles
            }
        }
    }
}

// Variable-accuracy transform that does an estimation, then computes enough
// reference V-cycles to achieve target accuracy.
//
// numIterations specifies the number of Iterations of reference V-cycles to do
// after the initial estimation is done.
transform Poisson2DRefFMG
from X[n,n], B[n,n]
to   Y[n,n]
accuracy_bins 10 1000 100000 10000000 1000000000
accuracy_variable numIterations
accuracy_metric Poisson2DAccuracyMetric
{
    to (Y y) from(X x, B b) {

        // Estimation is called with a numIters argument of 0 because we will
        // control the number of reference V-cycles to do at this level in
        // this transform.
        Poisson2DRefFMGInner(y, x, b, 0);

        // do reference V-cycles for numIterations
        if (numIters > 0) {
            Poisson2DRefMG(y, y, b, numIterations);
        }
    }
}

#endif // POISSON2DREFFMG_PBCC
