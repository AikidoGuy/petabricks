#ifndef FMGV2D_PBCC
#define FMGV2D_PBCC

//Multigrid V-cycle 2D
//assume dimension n = 2^k + 1

// User must define: Residual2D() and mgv2D().
//
// This transform won't compile on its own since the user must define
// the desired relax and residual operators.  Include those operators
// and then include this file.  See Poisson2Dmgv.pbcc for an example.

#include "../simple/add.pbcc"
#include "../simple/copy.pbcc"
#include "Interpolate2Dnew.pbcc"
#include "Restrict2Dnew.pbcc"

// performance note: Y can point to the same matrix region as X
// numIterations specifies the number of Iterations of mgv cycles to do
// after the initial estimation is done.  If numIterations == 0, no
// V-cycles are done and the estimate is returned.
transform fmgv2D
from X[n,n], B[n,n], numIterations
through zeros[(n+1)/2,(n+1)/2]
to  Y[n,n]
{
    zeros.cell(i,j) from() {
        return 0;
    }

    //solve recursively on coarser grids, with zero initial guess
    //then map the coarse solution back to the fine grid by Interpolation
    to (Y y) from(X x, B b, zeros z, numIterations numIters) {
        JASSERT(floor(log2(n-1)) == log2(n-1))(n).Text("input must be 2^k+1");
        JASSERT(numIters >= 0)(numIters).Text("num iterations must be non-negative");
        if (n == 3) {
//          printf("base case called for n = 3\n");
            Copy2D(y, x);
            y.cell(1, 1) = (x.cell(1, 0) + x.cell(0, 1) + x.cell(1, 2) + x.cell(2, 1) + b.cell(1, 1)) / 4;
        } else {
//          printf("recursive case called for n = %d\n", n);
            MatrixRegion2D t2 = MatrixRegion2D::allocate(n, n);
            MatrixRegion2D r1 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);
            MatrixRegion2D r2 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);
            Residual2D(t2, x, b);     // t2 gets residual
            Restrict2Dnew(r1, t2);    // r1 gets restricted residual
            fmgv2D(r2, z, r1, 1);     // r2 gets coarse update
            Interpolate2Dnew(t2, r2); // t2 gets interpolated update
            MatrixAdd(y, t2, x);      //  y gets updated guess
            if (numIters > 0) {
                mgv2D(y, y, b, numIters); //  y gets iterated with V-cycles
            }
        }
    }
}

#endif // FMGV2D_PBCC
