#ifndef TRIDIAGONALSOLVE_PBCC
#define TRIDIAGONALSOLVE_PBCC

#include "../simple/copy.pbcc"
 
// Tridiagonal Multi-system Solver
// Solves m systems where each is of the form PX=D, where P is a tridiagonal matrix
// i-th row of P is of the form a[i] b[i] c[i] and the rest are zero
// Each of the m systems has n unknowns x0,...xi,..,xn-1 in n equations

//------------------------------------------------------------
transform Base		// base case when n=2
from A[2,m], B[2,m], C[2,m], D[2,m]
to X[2,m]
{
	to (X.row(j) x) from (A.row(j) a, B.row(j) b, C.row(j) c, D.row(j) d){
			// two unknowns x0, x1 in the form: b0.x0 + c0.x1 = d0, a1.x0 + b1.x1 = d1
			// note, a0 = c1 = 0
			ElementT temp = b.cell(0) * b.cell(1) - a.cell(1) * c.cell(0);
			x.cell(0) = (b.cell(1) * d.cell(0) - c.cell(0) * d.cell(1) ) / temp;
			x.cell(1) = (b.cell(0) * d.cell(1) - a.cell(1) * d.cell(0) ) / temp;		
	}	
} 
//------------------------------------------------------------
transform Sequential	// Sequential (Thomas) algorithm 
from A[n,m], B[n,m], C[n,m], D[n,m]
to X[n,m]
{
	to (X.row(j) x) from (A.row(j) a, B.row(j) b, C.row(j) c, D.row(j) d) using (ct[n], dt[n]){
		IndexT i;		
		Copy1D(ct, c);
		Copy1D(dt, d);
		// forward elimination (note a[0]=0, c[n-1]=0)
		ct.cell(0) = ct.cell(0) / b.cell(0); 	// c0' = c0 / b0
		dt.cell(0) = dt.cell(0) / b.cell(0); 	// d0' = d0 / b0
		for ( i = 1; i < n ; i++) {
			ElementT temp = b.cell(i) - a.cell(i) * ct.cell(i-1);			
			ct.cell(i) /= temp; 		// last one redundant
			dt.cell(i) = (dt.cell(i) - a.cell(i) * dt.cell(i-1))/temp;
		}
		// backward substitution
		x.cell(n-1) = dt.cell(n-1);
		for (i = n-2; i >= 0 ; i--) {
			x.cell(i) = dt.cell(i) - x.cell(i+1) * ct.cell(i);
		}
	}	
}
//------------------------------------------------------------
transform Sequential2	// Sequential (Thomas) algorithm 
from A[n,m], B[n,m]
to X[n,m], C[n,m], D[n,m]
{
	to (X.row(j) x, C.row(j) ct, D.row(j) dt) from (A.row(j) a, B.row(j) b) {
		IndexT i;		
		// forward elimination (note a[0]=0, c[n-1]=0)
		ct.cell(0) = ct.cell(0) / b.cell(0); 	// c0' = c0 / b0
		dt.cell(0) = dt.cell(0) / b.cell(0); 	// d0' = d0 / b0
		for ( i = 1; i < n ; i++) {
			ElementT temp = b.cell(i) - a.cell(i) * ct.cell(i-1);			
			ct.cell(i) /= temp; 		// last one redundant
			dt.cell(i) = (dt.cell(i) - a.cell(i) * dt.cell(i-1))/temp;
		}
		// backward substitution
		x.cell(n-1) = dt.cell(n-1);
		for (i = n-2; i >= 0 ; i--) {
			x.cell(i) = dt.cell(i) - x.cell(i+1) * ct.cell(i);
		}
	}	
}
//------------------------------------------------------------
transform BackSubstitute		// used in CR
from XX[n/2,m], A[n,m], B[n,m], C[n,m], D[n,m]		
to X[n,m]
{
	to (X.cell(i,j) x) from (XX.row(j) xx, A.row(j) a, B.row(j) b, C.row(j) c, D.row(j) d) {
		// Go backwards, computing X[n] based on XX[n/2]
			// Ideally this transform should have another input as PARITY (see Merge)
		// As of now, we assume parity=1
		if (i%2 != 0) 
			x = xx.cell((i-1)/2);			// assumes odd parity
		else {
			// Remaining n/2 elements of X computed using two adjacent values above and below
			IndexT low = i/2 -1; if (low < 0) low = 0;			
			IndexT high = i/2;
			x = (d.cell(i) - a.cell(i) * xx.cell(low) - c.cell(i) * xx.cell(high) ) / b.cell(i);
		}	
	}
}
//------------------------------------------------------------
transform CR		// Cyclic reduction (CR) algorithm
from A[n,m], B[n,m], C[n,m], D[n,m]
through AA[n/2,m], BB[n/2,m], CC[n/2,m], DD[n/2,m]
to X[n,m]
{
	to (AA aa, BB bb, CC cc, DD dd) from (A a, B b, C c, D d) {
		// Obtain a system with n/2 unknowns by reduction (odd or even)	 
		ReduceToHalfSize(aa, bb, cc, dd, a, b, c, d, 1); // let's get odd unknowns 
	}
	
	to (X x) from (AA aa, BB bb, CC cc, DD dd, A a, B b, C c, D d) using (xx[n/2,m]){
		//printf("CR-rule2: n=%d\n", n);
		// Solve this n/2 system using TridiagonalSolve() onto XX[n/2]
		Tridiagonal(xx, aa, bb, cc, dd);
		// Obtain the full solution in X[n] by backsubtituting from solutions in XX[n/2]
		BackSubstitute(x, xx, a, b, c, d); 	
	}
}
//------------------------------------------------------------
transform ReduceToHalfSize		// used in PCR
from A[n,m], B[n,m], C[n,m], D[n,m], PARITY
to A2[n/2,m], B2[n/2,m], C2[n/2,m], D2[n/2,m]
{
	to (A2.cell(j,r) a2, B2.cell(j,r) b2, C2.cell(j,r) c2, D2.cell(j,r) d2) from (A.row(r) a, B.row(r) b, C.row(r) c, D.row(r) d, PARITY parity) {
		// if parity = 0, reduce to the even unknowns 0, 2, 4,...,(n-2) --> map to --> 0,1,2,...,(n/2-1)
		// else reduce to the odd unknowns 1, 3, 5,...,(n-1) --> map to --> 0,1,2,...,(n/2-1)
		IndexT i = (parity == 0)? (2*j) : (2*j +1);
		IndexT low = i-1; if (low < 0) low = 0;
		IndexT high = i + 1; if (high >= n) high = n-1;
		ElementT k1 = a.cell(i) / b.cell(low);	// = 0 when i = 0
		ElementT k2 = c.cell(i) / b.cell(high);	// = 0 when i = n-1

		a2 = (-1) * a.cell(low) * k1;
		b2 = b.cell(i) - c.cell(low) * k1 - a.cell(high) * k2;
		c2 = (-1) * c.cell(high) * k2;					
		d2 = d.cell(i) - d.cell(low) * k1 - d.cell(high) * k2;
	}
}
//------------------------------------------------------------
transform Merge				// used in PCR
from X0[n/2,m], X1[n/2,m]
to X[n,m]
{
	to (X.cell(i,j) x) from (X0.row(j) x0, X1.row(j) x1){
		// insert items 0, 1, 2,...,(n/2-1) in X0 into even indices 0, 2, 4, ...,(n-2) of X
		// insert items 0, 1, 2,...,(n/2-1) in X1 into odd indices 1, 3, 5,...,(n-1) of X
		if (i%2 == 0) x = x0.cell(i/2);
		else x = x1.cell((i-1)/2);	
	}
}
//------------------------------------------------------------
transform PCR		// Parallel Cyclic reduction (PCR) algorithm
from A[n,m], B[n,m], C[n,m], D[n,m]
through A0[n/2,m], B0[n/2,m], C0[n/2,m], D0[n/2,m], A1[n/2,m], B1[n/2,m], C1[n/2,m], D1[n/2,m]
to X[n,m]
{
	to (A0 a0, B0 b0, C0 c0, D0 d0, A1  a1, B1 b1, C1 c1, D1 d1) from (A a, B b, C c, D d) {
		// Decompose into two systems with n/2 unknowns in each (odd and even)	 
		// Remap those two subsystems onto A0,...,D0 and A1,...,D1
		spawn ReduceToHalfSize(a0, b0, c0, d0, a, b, c, d, 0); // even unknowns 
		spawn ReduceToHalfSize(a1, b1, c1, d1, a, b, c, d, 1); // odd unknowns
		sync;		// sync is implied anyway
	}
	
	to (X x) from (A0 a0, B0 b0, C0 c0, D0 d0, A1  a1, B1 b1, C1 c1, D1 d1) using (x0[n/2,m], x1[n/2,m]){
		// recursively call TridiagonalSolve() to solve each two subsystems onto x0 and x1
		spawn Tridiagonal(x0, a0, b0, c0, d0); // even unknowns
		spawn Tridiagonal(x1, a1, b1, c1, d1); // odd unknowns
		sync;
		// merge/map x0, x1 onto x
		Merge(x, x0, x1);		
	}
}

//------------------------------------------------------------
transform Tridiagonal 	// m systems, each with n unknowns
from A[n,m], B[n,m], C[n,m], D[n,m]
to X[n,m] 	
{
	// Sequential 1 (Thomas) algorithm 	
	rule Sequential	
	to (X x) from (A a, B b, C c, D d) {
		if (n == 2)
			Base(x, a, b, c, d);
		else 
			Sequential(x, a, b, c, d);
	}
	
	// Sequential 2 (Thomas) algorithm 	
	rule Sequential	
	to (X x) from (A a, B b, C c, D d) using (ct[n,m], dt[n,m]){
		if (n == 2)
			Base(x, a, b, c, d);
		else {
		  Copy2D(ct, c);
		  Copy2D(dt, d);
			Sequential(x, ct, dt, a, b);
		}
	}
	
	// CR (Cyclic Reduction) Algorithm
	rule CR
	to (X x) from (A a, B b, C c, D d) {
		if (n == 2)
			Base(x, a, b, c, d);
		else 
			CR(x, a, b, c, d);
	}
		
	// PCR (Parallel Cyclic Reduction) Algorithm
	rule PCR
	to (X x) from (A a, B b, C c, D d) {
		if (n == 2)
			Base(x, a, b, c, d);
		else 
			PCR(x, a, b, c, d);
	}

}

#endif // TRIDIAGONALSOLVE_PBCC

