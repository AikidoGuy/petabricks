#ifndef NWKDE_PBCC
#define NWKDE_PBCC

#include "utils.pbcc"
//#define DEBUG
#define WORKAROUND // workaround for generator having specific sizes
#define TESTDIR "/afs/csail.mit.edu/u/c/cychan/projects/petabricks/examples/kernel/test/"
//#define TESTDIR "/home/cychan/projects/petabricks/examples/kernel/test/"

transform NWKDEGenerator
from IN[n]
to   TRAINDATA[4,8750], WRAPFLAGS[4], KERNELWIDTHS[4],
     TRAININDICES[n], TRAINVARINDEX[8], TRAINTIMEOFFSET[8],
     TESTDATA[4,8750],
     TESTINDICES[n], TESTVARINDEX[8], TESTTIMEOFFSET[8],
     OUTPUTVARINDEX, OUTPUTTIMEOFFSET
{
    to (TRAINDATA trainData,
        WRAPFLAGS wrapFlags,
        KERNELWIDTHS kernelWidths,
        TRAININDICES trainIndices,
        TRAINVARINDEX trainVarIndex,
        TRAINTIMEOFFSET trainTimeOffset,
        TESTDATA testData,
        TESTINDICES testIndices,
        TESTVARINDEX testVarIndex,
        TESTTIMEOFFSET testTimeOffset,
        OUTPUTVARINDEX outputVarIndex,
        OUTPUTTIMEOFFSET outputTimeOffset)
    from (IN in)
    {
        MatrixRegion2D a;
        MatrixRegion1D b;

        char filename[1024];
        int cwdLen = strlen(TESTDIR);
        strcpy(filename, TESTDIR);

        a = MatrixIO(TESTDIR "trainData.pba", "r").read2D();
        Copy2D(trainData, a);

        b = MatrixIO(TESTDIR "wrapFlags.pba", "r").read1D();
        Copy1D(wrapFlags, b);

        b = MatrixIO(TESTDIR "kernelWidths.pba", "r").read1D();
        Copy1D(kernelWidths, b);

        b = MatrixIO(TESTDIR "trainIndices.pba", "r").read1D();
        Copy1D(trainIndices, b.region(0, n));

        b = MatrixIO(TESTDIR "trainVarIndex.pba", "r").read1D();
        Copy1D(trainVarIndex, b);

        b = MatrixIO(TESTDIR "trainTimeOffset.pba", "r").read1D();
        Copy1D(trainTimeOffset, b);

        a = MatrixIO(TESTDIR "testData.pba", "r").read2D();
        Copy2D(testData, a);

        b = MatrixIO(TESTDIR "testIndices.pba", "r").read1D();
        Copy1D(testIndices, b.region(0, n));

        b = MatrixIO(TESTDIR "testVarIndex.pba", "r").read1D();
        Copy1D(testVarIndex, b);

        b = MatrixIO(TESTDIR "testTimeOffset.pba", "r").read1D();
        Copy1D(testTimeOffset, b);

        outputVarIndex = MatrixIO(TESTDIR "outputVarIndex.pba", "r").read0D();
        outputTimeOffset = MatrixIO(TESTDIR "outputTimeOffset.pba", "r").read0D();
    }
}

transform NWKDECheckInputs
from TRAINDATA[m,n], TRAININDICES[l], TRAINVARINDEX[p], TRAINTIMEOFFSET[p],
     TESTDATA[m2,n2], TESTINDICES[q], TESTVARINDEX[p], TESTTIMEOFFSET[p],
     OUTPUTVARINDEX, OUTPUTTIMEOFFSET
to INPUTSCHECKED
{
    INPUTSCHECKED
    from (TRAININDICES trainIndices,
          TRAINVARINDEX trainVarIndex,
          TRAINTIMEOFFSET trainTimeOffset,
          TESTINDICES testIndices,
          TESTVARINDEX testVarIndex,
          TESTTIMEOFFSET testTimeOffset,
          OUTPUTVARINDEX outputVarIndex,
          OUTPUTTIMEOFFSET outputTimeOffset)
    {
        double min, max, min2, max2;

        findMinAndMax(&min, &max, trainVarIndex);
        fprintf(stderr, "trainVarIndex range: (%g, %g)\n", min, max);
        if (min < 0 || max > m) {
            fprintf(stderr, "trainVarIndex out of bounds: (%d, %d)\n", 0, m);
            PetabricksRuntime::abort();
        }

        fprintf(stderr, "outputVarIndex: %g\n", outputVarIndex);
        if (outputVarIndex < 0 || outputVarIndex > m) {
            fprintf(stderr, "outputVarIndex out of bounds: (%d, %d)\n", 0, m);
            PetabricksRuntime::abort();
        }

        findMinAndMax(&min, &max, testVarIndex);
        fprintf(stderr, "testVarIndex range: (%g, %g)\n", min, max);
        if (min < 0 || max > m2) {
            fprintf(stderr, "testVarIndex out of bounds: (%d, %d)\n", 0, m2);
            PetabricksRuntime::abort();
        }

        findMinAndMax(&min, &max, trainIndices);
        findMinAndMax(&min2, &max2, trainTimeOffset);
        fprintf(stderr, "trainIndices + trainTimeOffset range: (%g, %g)\n",
               min + min2, max + max2);
        if (min + min2 < 0 || max + max2 > n) {
            fprintf(stderr, "trainIndices + trainTimeOffset out of bounds: (%d, %d)\n",
                   0, n);
            PetabricksRuntime::abort();
        }

        fprintf(stderr, "trainIndices + outputTimeOffset range: (%g, %g)\n",
               min + outputTimeOffset, max + outputTimeOffset);
        if (min + outputTimeOffset < 0 || max + outputTimeOffset > n) {
            fprintf(stderr, "trainIndices + outputTimeOffset out of bounds: (%d, %d)\n",
                   0, n);
            PetabricksRuntime::abort();
        }

        findMinAndMax(&min, &max, testIndices);
        findMinAndMax(&min2, &max2, testTimeOffset);
        fprintf(stderr, "testIndices + testTimeOffset range: (%g, %g)\n",
               min + min2, max + max2);
        if (min + min2 < 0 || max + max2 > n2) {
            fprintf(stderr, "testIndices + testTimeOffset out of bounds: (%d, %d)\n",
                   0, n2);
            PetabricksRuntime::abort();
        }
    }
}

/*  TRAINDATA - block of data: n time slices, m variables per time slice
    TRAININDICES - l time indices into TRAINDATA to use for training

    TESTDATA - block of data: n2 time slices, m2 variables per time slice
    TESTINDICES - q indices into TESTDATA to evaluate the regression

    WRAPFLAGS - indicates whether TRAINDATA column corresponds to a wind
                direction \in [0, 360]
    KERNELWIDTHS - width of the kernel function to use for a data column

    For each time index in TRAININDICES or TESTINDICES, we associate
    a p-dim vector of predictors for use during regression.  The
    TRAINVARINDEX array contains the column index (into TRAINDATA) of
    the variable to use for each predictor.  The TRAINTIMEOFFSET array
    contains the time offset relative to the current time index.  In this way,
    we can build predictor vectors that contain overlapping data for
    different time indices.  Similarly, TESTVARINDEX and TESTTIMEOFFSET
    specify the predictor vector to use when computing the regression output.

    OUTPUTVARINDEX - which variable in TRAINDATA for output
    OUTPUTTIMEOFFSET - time offset from trainIndex in TRAINDATA for output

    SQDIFFS - squared differences for each predictor for each train-test
              point pair
    WEIGHTS - weights computed with Gaussian kernel function for each
              train-test point pair
    PARTIALS - weighted output partial sums
*/

transform NWKDEBase
from TRAINDATA[m,n], WRAPFLAGS[m], KERNELWIDTHS[m],
     TRAININDICES[l], TRAINVARINDEX[p], TRAINTIMEOFFSET[p],
     TESTDATA[m2,n2],
     TESTINDICES[q], TESTVARINDEX[p], TESTTIMEOFFSET[p],
     OUTPUTVARINDEX, OUTPUTTIMEOFFSET
to RESULT[q]
through SQDIFFS[p,l,q], WEIGHTS[l,q], PARTIALS[l,q]
{

    /* METHOD 1: compute PARTIALS by exposing the most fine-grained
       parallelism.  this method may be less cache-efficient depending on
       execution ordering. */

    to   (SQDIFFS.cell(i,j,k) sqDiff)
    from (TRAINDATA trainData,
          WRAPFLAGS wrapFlags,
          KERNELWIDTHS kernelWidths,
          TRAININDICES.cell(j) trainIndex,
          TRAINVARINDEX.cell(i) trainVarIndex,
          TRAINTIMEOFFSET.cell(i) trainTimeOffset,
          TESTDATA testData,
          TESTINDICES.cell(k) testIndex,
          TESTVARINDEX.cell(i) testVarIndex,
          TESTTIMEOFFSET.cell(i) testTimeOffset)
    {
        int wrapFlag = (int) wrapFlags.cell((int) trainVarIndex);
        double kernelWidth = kernelWidths.cell((int) trainVarIndex);

        int trainTimeIndex = (int) trainIndex + (int) trainTimeOffset;
        int  testTimeIndex = (int)  testIndex + (int)  testTimeOffset;

        double trainPoint = trainData.cell((int) trainVarIndex, trainTimeIndex);
        double  testPoint =  testData.cell((int)  testVarIndex,  testTimeIndex);

        double diff = trainPoint - testPoint;

        if (wrapFlag) {
            
            // wrap relative difference into [-180,180]
            // do most of the arithmetic in integers for speed
            // P360 and M360 indicate "plus 360" and "minus 360"

            // add 360 *before* cast to round towards -INF instead of towards 0
            int diffIntP360 = (int) (diff + 360);

            // add 180 to ensure modulo result is positive
            int diffIntWrapP360 = ((diffIntP360 + 180) % 360) + 180;

            double diffFracM360 = diff - diffIntP360;
            diff = diffIntWrapP360 + diffFracM360;
        }

        // normalize according to kernel width
        diff /= kernelWidth;

        // return squared difference
        sqDiff = diff * diff;
#ifdef DEBUG
        fprintf(stderr, "method 1:  sqdiff(%d, %d, %d) = %g\n", i, j, k, sqDiff);
#endif
    }

    to (WEIGHTS.cell(j,k) weight)
    from (SQDIFFS.region(0, j,   k,
                         p ,j+1, k+1) sqDiffs)
    {
        ReduceAdd(weight, sqDiffs.slice(2,0).slice(1,0));
        weight = exp(-((double) weight));
#ifdef DEBUG
        fprintf(stderr, "method 1:  weight(%d, %d) = %g\n", j, k, weight);
#endif
    }

    to (PARTIALS.cell(j,k) partial)
    from (TRAINDATA trainData,
          TRAININDICES.cell(j) trainIndex,
          OUTPUTVARINDEX outputVarIndex,
          OUTPUTTIMEOFFSET outputTimeOffset,
          WEIGHTS.cell(j,k) weight)
    {
        int timeIndex = (int) trainIndex + (int) outputTimeOffset;
        partial = trainData.cell((int) outputVarIndex, timeIndex);
        partial *= weight;
#ifdef DEBUG
        fprintf(stderr, "method 1: partial(%d, %d) = %g\n", j, k, partial);
#endif
    }

    /* METHOD 2: Compute weights and partials directly with one pass through the data */

    to   (PARTIALS.cell(j,k) partial,
          WEIGHTS.cell(j,k) weight)
    from (TRAINDATA trainData,
          WRAPFLAGS wrapFlags,
          KERNELWIDTHS kernelWidths,
          TRAININDICES.cell(j) trainIndex,
          TRAINVARINDEX trainVarIndex,
          TRAINTIMEOFFSET trainTimeOffset,
          TESTDATA testData,
          TESTINDICES.cell(k) testIndex,
          TESTVARINDEX testVarIndex,
          TESTTIMEOFFSET testTimeOffset,
          OUTPUTVARINDEX outputVarIndex,
          OUTPUTTIMEOFFSET outputTimeOffset)
    {
        double sum = 0;

        for (int i = 0; i < trainVarIndex.count(); ++i) {

            int wrapFlag = (int) wrapFlags.cell((int) trainVarIndex.cell(i));
            double kernelWidth = kernelWidths.cell((int) trainVarIndex.cell(i));

            int trainTimeIndex = (int) trainIndex + (int) trainTimeOffset.cell(i);
            int  testTimeIndex = (int)  testIndex + (int)  testTimeOffset.cell(i);

            double trainPoint = trainData.cell((int) trainVarIndex.cell(i), trainTimeIndex);
            double  testPoint =  testData.cell((int)  testVarIndex.cell(i),  testTimeIndex);

            double diff = trainPoint - testPoint;

            if (wrapFlag) {

                // wrap relative difference into [-180,180]
                // do most of the arithmetic in integers for speed
                // P360 and M360 indicate "plus 360" and "minus 360"

                // add 360 *before* cast to round towards -INF instead of towards 0
                int diffIntP360 = (int) (diff + 360);

                // add 180 to ensure modulo result is positive
                int diffIntWrapP360 = ((diffIntP360 + 180) % 360) + 180;

                double diffFracM360 = diff - diffIntP360;
                diff = diffIntWrapP360 + diffFracM360;
            }

            // normalize according to kernel width
            diff /= kernelWidth;

            // return squared difference
            sum += diff * diff;
        }

        int outputTimeIndex = (int) trainIndex + (int) outputTimeOffset;
        weight = exp(-((double) sum));
        partial = weight * trainData.cell((int) outputVarIndex, outputTimeIndex);
#ifdef DEBUG
        fprintf(stderr, "method 2:  weight(%d, %d) = %g\n", j, k, weight);
        fprintf(stderr, "method 2: partial(%d, %d) = %g\n", j, k, partial);
#endif
    }

    /* Once we have the PARTIALS and WEIGHTS, we can compute RESULT */

    to (RESULT.cell(k) result)
    from (PARTIALS.row(k) partials,
          WEIGHTS.row(k) weights)
    {
        double totalWeight;
        ReduceAdd(result, partials);
        ReduceAdd(totalWeight, weights);
        result /= totalWeight;
#ifdef DEBUG
        fprintf(stderr, "Output %d = %g\n", k, result);
#endif // DEBUG
    }
}

transform NWKDERecursive
from TRAINDATA[m,n], WRAPFLAGS[m], KERNELWIDTHS[m],
     TRAININDICES[l], TRAINVARINDEX[p], TRAINTIMEOFFSET[p],
     TESTDATA[m2,n2],
     TESTINDICES[q], TESTVARINDEX[p], TESTTIMEOFFSET[p],
     OUTPUTVARINDEX, OUTPUTTIMEOFFSET
to RESULT[q]
{
    to   (RESULT           result)
    from (TRAINDATA        trainData,
          WRAPFLAGS        wrapFlags,
          KERNELWIDTHS     kernelWidths,
          TRAININDICES     trainIndices,
          TRAINVARINDEX    trainVarIndex,
          TRAINTIMEOFFSET  trainTimeOffset,
          TESTDATA         testData,
          TESTINDICES      testIndices,
          TESTVARINDEX     testVarIndex,
          TESTTIMEOFFSET   testTimeOffset,
          OUTPUTVARINDEX   outputVarIndex,
          OUTPUTTIMEOFFSET outputTimeOffset)
    {
        NWKDEBase(result, trainData, wrapFlags, kernelWidths,
                  trainIndices, trainVarIndex, trainTimeOffset,
                  testData, testIndices,
                  testVarIndex, testTimeOffset,
                  outputVarIndex, outputTimeOffset);
    }

    to   (RESULT           result)
    from (TRAINDATA        trainData,
          WRAPFLAGS        wrapFlags,
          KERNELWIDTHS     kernelWidths,
          TRAININDICES     trainIndices,
          TRAINVARINDEX    trainVarIndex,
          TRAINTIMEOFFSET  trainTimeOffset,
          TESTDATA         testData,
          TESTINDICES      testIndices,
          TESTVARINDEX     testVarIndex,
          TESTTIMEOFFSET   testTimeOffset,
          OUTPUTVARINDEX   outputVarIndex,
          OUTPUTTIMEOFFSET outputTimeOffset)
    {
        int mid = q / 2;

        if (mid > 0) {
            NWKDERecursive(result.region(0, mid),
                           trainData, wrapFlags, kernelWidths,
                           trainIndices, trainVarIndex, trainTimeOffset,
                           testData, testIndices.region(0, mid),
                           testVarIndex, testTimeOffset,
                           outputVarIndex, outputTimeOffset);
        }

        if (mid < q) {
            NWKDERecursive(result.region(mid, q),
                           trainData, wrapFlags, kernelWidths,
                           trainIndices, trainVarIndex, trainTimeOffset,
                           testData, testIndices.region(mid, q),
                           testVarIndex, testTimeOffset,
                           outputVarIndex, outputTimeOffset);
        }

    }
}

transform NWKDE
#ifdef WORKAROUND
from TRAINDATA[4,8750], WRAPFLAGS[4], KERNELWIDTHS[4],
     TRAININDICES[l], TRAINVARINDEX[8], TRAINTIMEOFFSET[8],
     TESTDATA[4,8750],
     TESTINDICES[q], TESTVARINDEX[8], TESTTIMEOFFSET[8],
     OUTPUTVARINDEX, OUTPUTTIMEOFFSET
to RESULT[q]
through INPUTSCHECKED
#else
from TRAINDATA[m,n], WRAPFLAGS[m], KERNELWIDTHS[m],
     TRAININDICES[l], TRAINVARINDEX[p], TRAINTIMEOFFSET[p],
     TESTDATA[m2,n2],
     TESTINDICES[q], TESTVARINDEX[p], TESTTIMEOFFSET[p],
     OUTPUTVARINDEX, OUTPUTTIMEOFFSET
to RESULT[q]
#endif
generator NWKDEGenerator
//optimize KERNELWIDTHS[m]
{
    to (RESULT result)
    from (TRAINDATA        trainData,
          WRAPFLAGS        wrapFlags,
          KERNELWIDTHS     kernelWidths,
          TRAININDICES     trainIndices,
          TRAINVARINDEX    trainVarIndex,
          TRAINTIMEOFFSET  trainTimeOffset,
          TESTDATA         testData,
          TESTINDICES      testIndices,
          TESTVARINDEX     testVarIndex,
          TESTTIMEOFFSET   testTimeOffset,
          OUTPUTVARINDEX   outputVarIndex,
          OUTPUTTIMEOFFSET outputTimeOffset)
    {
#ifdef DEBUG
        double ret;
        NWKDECheckInputs(ret, trainData, trainIndices,
                         trainVarIndex, trainTimeOffset,
                         testData, testIndices,
                         testVarIndex, testTimeOffset,
                         outputVarIndex, outputTimeOffset);
#endif
        NWKDERecursive(result, trainData, wrapFlags, kernelWidths,
                       trainIndices, trainVarIndex, trainTimeOffset,
                       testData, testIndices,
                       testVarIndex, testTimeOffset,
                       outputVarIndex, outputTimeOffset);
    }

}

#endif // NWKDE_PBCC

