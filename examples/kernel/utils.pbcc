#ifndef UTILS_PBCC
#define UTILS_PBCC

#include "../simple/reduce.pbcc"

%{

inline
void printMatrix(const workstealing::ConstMatrixRegion2D& A)
{
  for (int j = 0; j < A.size(1); j++) {
    for (int i = 0; i < A.size(0); i++) {
      printf("%g ", (ElementT) A.cell(i, j));
    }
    printf("\n");
  }
  printf("\n");
}

inline
void printMatrix(const distributed::ConstMatrixRegion2D& A)
{
  for (int j = 0; j < A.size(1); j++) {
    for (int i = 0; i < A.size(0); i++) {
      printf("%g ", (ElementT) A.cell(i, j));
    }
    printf("\n");
  }
  printf("\n");
}


template<typename T>
int findMinAndMax(ElementT *min, ElementT *max, const T& array)
{
    *min = *max = array.cell(0);
    for (int i = 1; i < array.count(); ++i) {
        if (array.cell(i) < *min) {
            *min = array.cell(i);
        }
        if (array.cell(i) > *max) {
            *max = array.cell(i);
        }
    }

    return 0;
}

%}

// computes a dot product
transform DotProduct
from A[n], B[n]
through TEMP[n]
to C
{
  TEMP.cell(i) from (A.cell(i) a, B.cell(i) b)
  {
    return a * b;
  }

  C from (TEMP t)
  {
    ElementT result;
    ReduceAdd(result, t);
    return result;
  }
}

#endif // UTILS_PBCC

