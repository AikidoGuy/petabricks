// TODO(jrk): streamline constants and magic numbers
#define KERNEL_RADIUS 2
#define KERNEL_LENGTH 5

transform convolutionRows
from Input[w,h], Kernel[KERNEL_LENGTH]
to Output[w,h]
{
  Output.cell(x,y) from(Input.region(x-2,y,x+3,y+1) input, Kernel kernel) {
    ElementT sum = 0;
    for(int i = 0; i < KERNEL_LENGTH; i++){
      sum += input.cell(i,0) * kernel.cell(i);
    }
    return sum;
  }

  Output.cell(x,y) from(Input input, Kernel kernel) {
    ElementT sum = 0;
    for(int k = -2; k <= 2; k++){
      int d = x + k;
      if(d >= 0 && d < w)
        sum += input.cell(d,y) * kernel.cell(2 + k);
      }
    return sum;
  }
}

transform convolutionColumns
from Input[w,h], Kernel[KERNEL_LENGTH]
to Output[w,h]
{
  Output.cell(x,y) from(Input.region(x,y-2,x+1,y+3) input, Kernel kernel) {
    ElementT sum = 0;
    for(int i = 0; i < KERNEL_LENGTH; i++){
      sum += input.cell(0,i) * kernel.cell(i);
    }
    return sum;
  }

  Output.cell(x,y) from(Input input, Kernel kernel) {
    ElementT sum = 0;
    for(int k = -2; k <= 2; k++){
      int d = y + k;
      if(d >= 0 && d < h)
        sum += input.cell(x,d) * kernel.cell(2 + k);
      }
    return sum;
  }
}

transform convolution2D
from Input[w,h], Kernel[KERNEL_LENGTH]
to Output[w,h]
{
  Output.cell(x,y) from(Input.region(x-2,y-2,x+3,y+3) input, Kernel kernel) {
    ElementT sum = 0;
    for(int x = 0; x < KERNEL_LENGTH; x++){
      for(int y = 0; y < KERNEL_LENGTH; y++){
        sum += input.cell(x,y) * kernel.cell(x) * kernel.cell(y);
      }
    }
    return sum;
  }

  Output.cell(x,y) from(Input input, Kernel kernel) {
    ElementT sum = 0;
    for(int kx = -2; kx <= 2; kx++){
      int dx = x + kx;
      if(dx >= 0 && dx < w) {
        for(int ky = -2; ky <= 2; ky++){
          int dy = y + ky;
          if(dy >= 0 && dy < h)
            sum += input.cell(dx,dy) * kernel.cell(2 + kx) * kernel.cell(2 + ky);
        }
      }
    }
    return sum;
  }
}

transform convolutionSeparable
from Input[w,h], Kernel[KERNEL_LENGTH]
to Output[w,h]
{
  to(Output out) from(Input in, Kernel kernel){
//    std::cout << "convolution2D" << std::endl;
    convolution2D(out, in, kernel);
  }

  to(Output out) from(Input in, Kernel kernel) using(buffer[w,h]){
//    std::cout << "convolutionSeparable" << std::endl;
    convolutionRows(buffer, in, kernel);
    convolutionColumns(out, buffer, kernel);
  }
}
