#ifndef TRISOLVELL_PBCC
#define TRISOLVELL_PBCC

// Left lower (LL) triangular solve
// Solve AX = B for X, where A is lower triangular

#include "../simple/copy.pbcc"
#include "../simple/scale.pbcc"
#include "../multiply/multiplyAdd.pbcc"
#include "TriSolveLAPACK.pbcc"
#include "TriSolveGenerators.pbcc"

// right looking version (update trailing matrix after each row is solved)
transform TriSolveLLBaseRL
from UNITFLAG, A[m,m], B[n,m]
to X[n,m]
{
    to   (X x)
    from (UNITFLAG unitFlag, A a, B b)
    {
        Copy2D(x, b);
        for (int i = 0; i < m-1; ++i) {
            if (!unitFlag) {
                Scale(x.region(0, i, n, i+1), 1.0 / a.cell(i, i));
            }
            MatrixMultiplyAdd(x.region(0, i+1, n, m), -1, a.region(i, i+1, i+1, m), x.region(0, i, n, i+1), 1);
        }
        if (!unitFlag) {
            Scale(x.region(0, m-1, n, m), 1.0 / a.cell(m-1, m-1));
        }
    }
}

// left looking version (process one row at a time)
transform TriSolveLLBaseLL
from UNITFLAG, A[m,m], B[n,m]
to X[n,m]
{
    primary
    to   (X.cell(j, 0) x)
    from (UNITFLAG unitFlag, B.cell(j, 0) b, A.cell(0,0) a)
    {
        x = unitFlag ? b : b / a;
    }

    to   (X.region(0, i, n, i+1) xout)
    from (UNITFLAG unitFlag,
          X.region(0, 0, n, i  ) x, A.region(0, i, i, i+1) a,
          B.region(0, i, n, i+1) b, A.cell(i, i) aii)
    {
        // compute xout = (b - a * x) * factor
        Copy2D(xout, b);
        ElementT factor = unitFlag ? 1 : 1.0 / aii;
        MatrixMultiplyAdd(xout, -factor, a, x, factor);
    }
}

transform TriSolveLL
from UNITFLAG, A[m,m], B[n,m]
to X[n,m]
generator TriSolveLLGenerator
{
    to (X x) from (UNITFLAG unitFlag, A a, B b) {
        TriSolveLLBaseLL(x, unitFlag, a, b);
    }

    to (X x) from (UNITFLAG unitFlag, A a, B b) {
        TriSolveLLBaseRL(x, unitFlag, a, b);
    }

    to (X x) from (UNITFLAG unitFlag, A a, B b) {
        TriSolveLAPACK(x, 0, 0, unitFlag, 1, a, b);
    }
}

#endif // TRISOLVELL_PBCC
