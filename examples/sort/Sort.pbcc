#ifndef SORT_PBCC
#define SORT_PBCC

#define SORTSUBARRAY SortSubArray
#include "Quicksort.pbcc"
#include "Insertionsort.pbcc"
#include "Radixsort.pbcc"
#include "Parallel_Mergesort.pbcc"

#define WAY 4
#include "Mergesort.pbcc"
#undef WAY

#define WAY 8
#include "Mergesort.pbcc"
#undef WAY

#define WAY 16
#include "Mergesort.pbcc"
#undef WAY

transform SortSubArray
from IN[n], Pos
to OUT[n], TEMP[n]
{
  //to (OUT out, TEMP temp) from (IN in, Pos p)
  //{
  //  Parallel_MergesortSubArray( out, temp, in, p);
  //}

  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray4(out, temp, in, p);
  }

  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray8(out, temp, in, p);
  }
  
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray16(out, temp, in, p);
  }

  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    QuicksortSubArray(out, temp, in, p);
  }

  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    RadixsortSubArray(out, temp, in, p);
  }

  to (OUT out, TEMP temp) from (IN in)
  {
    if (n >= 4096) {
      PetabricksRuntime::abort();
    }
    InsertionsortSubArray(out, in);
  }
}

transform Sort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in)
  {
    Copy1D(out, in);
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    SortSubArray(out, temp, in, 60);
  }
}

#endif // SORT_PBCC

