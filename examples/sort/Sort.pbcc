#ifndef SORT_PBCC
#define SORT_PBCC

#include "Quicksort.pbcc"
#include "Mergesort.pbcc"
#include "Insertionsort.pbcc"

transform SortSubArray
from IN[n]
to OUT[n], TEMP[n]
{
//recursive(n)
//to (OUT out, TEMP temp) from (IN in)
//{
//  //printf("ms %d\n",n);
//  MergesortSubArray(out, temp, in);
//}

  recursive(n)
  to (OUT out, TEMP temp) from (IN in)
  {
    //printf("qs %d\n",n);
    QuicksortSubArray(out, temp, in);
  }

  to (OUT out, TEMP temp) from (IN in)
  {
    //printf("is %d\n",n);
    InsertionsortSubArray(out, in);
  }
}

transform Sort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in)
  {
    Copy1D(out, in);
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    SortSubArray(out, temp, in);
  }
}

#endif // SORT_PBCC

