#ifndef RADIXSORT_PBCC
#define RADIXSORT_PBCC

#include "../utilities.pbcc"
#include "Sort.pbcc"

%{

typedef          long long int64;
typedef unsigned long long uint64;

int get4Bits(double in, int position)
{
  union {
    double d;
    uint64 u;
  };
  d = in;
  uint64 inInt = u;
//printf("in:    %llx\n", in);
//printf("inInt: %llx\n", inInt);
  uint64 mask = -int64(inInt >> 63) | ((uint64) 1 << 63);
  inInt ^= mask;
  return (inInt & ((uint64) 15 << position)) >> position;
}

void Radix(MatrixRegion1D &out, MatrixRegion1D &in, int (&buckets)[18], int pos)
{
  int i;
  for (i = 0; i < in.size(0); i++) {
//    printf("Putting %g into bucket %d\n", in.cell(i), get4Bits(in.cell(i), pos));  
    buckets[get4Bits(in.cell(i), pos) + 2]++;
  }
/*
  printf("bucket hist:  (%d", buckets[2]);
  for (i = 3; i < 18; i++) {
    printf(", %d", buckets[i]);
  }
  printf(")\n");
*/
  for (i = 3; i < 18; i++) {
    buckets[i] += buckets[i - 1];
  }

  for (i = 0; i < in.size(0); i++) {
//    printf("copying %g into position %d\n", in.cell(i), buckets[get4Bits(in.cell(i), pos) + 1]);
    out.cell(buckets[get4Bits(in.cell(i), pos) + 1]++) = in.cell(i);
  }
/*
  printf("bucket start: (%d", buckets[0]);
  for (i = 1; i < 16; i++) {
    printf(", %d", buckets[i]);
  }
  printf(")\n");
*/
}

%}

transform RadixsortSubArray
from IN[n], Position
to OUT[n], TEMP[n]
{
  recursive
  to (OUT out, TEMP temp) from (IN in, Position pos)
  {
//    printf("RadixsortSubArray called\n");
    int buckets[18] = {0};
    Copy1D(temp, out);
    Radix(out, temp, buckets, (int) pos);
    if ((int) pos > 0) {
      for (int i = 0; i < 16; i++) {
        if (buckets[i + 1] > buckets[i] + 1) {
          SPAWN(SortSubArray(out.region(buckets[i], buckets[i + 1]), 
                            temp.region(buckets[i], buckets[i + 1]),
                            in.region(buckets[i], buckets[i + 1]), 
                            (int) pos - 4));
        }
      }
    }
/*
    int i;
    printf("subarray: (\n  %g\n", out.cell(0));
    for (i = 1; i < out.size(0); i++) {
      printf("  %g\n", out.cell(i));
    }
*/
  }

//to (OUT out, TEMP temp) from (IN in, Position pos)
//{
//  SortSubArray(out, temp, in);
//}
}

transform Radixsort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in)
  {
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    Copy1D(out, in);
    RadixsortSubArray(out, temp, in, 60);
  }
}

#endif // RADIXSORT_PBCC

