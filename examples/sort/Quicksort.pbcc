#ifndef QUICKSORT_PBCC
#define QUICKSORT_PBCC

#include "../utilities.pbcc"
#include "Sort.pbcc"

//#define SORTSUBARRAY QuicksortSubArray
#define SORTSUBARRAY SortSubArray

%{

void swap1D(MatrixRegion1D &A, int x, int y)
{
  double temp = A.cell(x);
  A.cell(x) = A.cell(y);
  A.cell(y) = temp;
}

int partition(MatrixRegion1D &A, int left, int right)
{
  double pivotValue = A.cell(right);
  int storeIndex = left;
  for (int i = left; i < right; i++) {
    if (A.cell(i) <= pivotValue) {
      swap1D(A, i, storeIndex);
      storeIndex++;
    }
  }
  swap1D(A, storeIndex, right);
  return storeIndex;
}

%}

transform QuicksortSubArray
from IN[n], Left, Right
to OUT[n], TEMP[n]
{
  to (OUT out, TEMP temp) from (IN in, Left left, Right right)
  {
    int pivotNewIndex = partition(out, left, right);
    if (pivotNewIndex - 1 > left)
      SORTSUBARRAY(out, temp, in, left, pivotNewIndex - 1);
    if (right > pivotNewIndex + 1)
      SORTSUBARRAY(out, temp, in, pivotNewIndex + 1, right);
  }
}

transform QuickSort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in)
  {
    Copy1D(out, in);
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    QuicksortSubArray(out, temp, in, 0, n - 1);
  }
}

#endif // QUICKSORT_PBCC

