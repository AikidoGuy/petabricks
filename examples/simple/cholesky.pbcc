#ifndef CHOLESKY_PBCC
#define CHOLESKY_PBCC
#include "../multiply/multiply.pbcc"
#include "copy.pbcc"
#include "transpose.pbcc"
#include "../LUDense/trilsolve.pbcc"
#include "../LUDense/triusolve.pbcc"

transform HermitianGenerate 
to H[n,n] {
	  
	  // this generates a real, symmetric, positive definite matrix
	  
	  to(H her)
	  from () { 
	    
	    MatrixRegion2D temp1 = MatrixRegion2D::allocate(n,n);
	    MatrixRegion2D temp2 = MatrixRegion2D::allocate(n,n);
	    
	    int i;
	    for (i = 0; i < temp1.width(); i++) {
             	 for (int j = 0; j <= i; j++) {
		      	   temp1.cell(i,j) = PetabricksRuntime::randInt(1,20);
		}
	    }

  	    for (i = 0; i < temp1.width(); i++) {
	    	for (int j = 0; j < i; j ++ ) {
   		    temp1.cell(j,i) = temp1.cell(i,j);
   		 }
	    }

	   
	   Copy2D(temp2, temp1);
	   MatrixMultiply (her, temp1, temp2);

	  }

}

transform MatrixCholeskyX2
from X1[n,m], L21T[n,n], L22[n,n], B2[n, m]
to L[n,m]
{
	to(L l)
	from (X1 x1, L21T l21t, L22 l22, B2 b2) 
	{

		MatrixRegion2D x1L21 = MatrixRegion2D::allocate(n,m);
		MatrixRegion2D b1_x1L21 = MatrixRegion2D::allocate(n,m);
		MatrixMultiply(x1L21, x1, l21t);
 		Subtract2D(b1_x1L21, b2, x1L21);	      
		triusolve(l, l22, b1_x1L21);
	}       
}

transform MatrixCholesky
from A[n,n]
to L[n,n]
generator HermitianGenerate
{

// cholesky factorization
// see: http://www.netlib.org/utk/papers/factor/node9.html


	// recursive def of cholesky
	to (L l)
	from (A a) {
	     if (n < 9) {
	     // do something not recursive
 	      	for (int i = 0; i < a.height(); i++) {
             	     for (int j = 0; j < (i+1); j++) {
            	      	 double s = 0;
            	     	 for (int k = 0; k < j; k++)
                     	     s += l.cell(k,i) * l.cell(k,j);
            	     	 l.cell(j, i) = (i == j) ?
                            sqrt(a.cell(i, i) - s) :
                            (1.0 / l.cell(j, j) * (a.cell(j, i) - s));
        	     }
	     	}	
	     } else {
	       // upper left corner
	       MatrixCholesky(l.region(0, 0, n/2, n/2), a.region(0,0,n/2,n/2));	   

	       // lower left corner
	       MatrixRegion2D L11 = l.region(0,0,n/2,n/2);
	       MatrixRegion2D L11_trans = L11.transposed();

	       MatrixRegion2D x1 = l.region(0,n/2,n/4,n).transposed();
	       MatrixRegion2D L11_l11 = L11.region(0,0,L11.width()/2, L11.height()/2);
	       //MatrixRegion2D b1 = a.region(0,n/2,n/4,n);
	       trilsolve(x1, L11_l11, a.region(0,n/2,n/4,n).transposed());
	       

	       // x2  = trisolve(L22,B2-x1L21)
	       MatrixRegion2D x2 = l.region(n/4,n/2,n/2,n); 
	       MatrixRegion2D l21t = L11_trans.region(L11_trans.width()/2,0,L11_trans.width(),L11_trans.height()/2);
	       MatrixRegion2D l22 = L11_trans.region(L11.width()/2,L11.height()/2,L11.width(),L11.height());
	       MatrixCholeskyX2(x2, l.region(0,n/2,n/4,n), l21t, l22, a.region(n/4,n/2,n/2,n));

	       // lower right corner
	       MatrixRegion2D t = MatrixRegion2D::allocate(n/2,n/2);
	       MatrixRegion2D l21_trans = MatrixRegion2D::allocate(n/2,n/2);
	       MatrixRegion2D A22_t = MatrixRegion2D::allocate(n/2,n/2);
	       Transpose(l21_trans, l.region(0,n/2,n/2,n));
	       MatrixMultiply(t, l.region(0,n/2,n/2,n), l21_trans);
	       Subtract2D(A22_t, a.region(n/2,n/2,n,n), t);
	       MatrixCholesky(l.region(n/2,n/2,n,n), A22_t); 

	    }
	}	
/*
	// specific case: first column
	to (L.cell(x,y) l) 
	from (L.cell(0,0) c, 
	A.cell(x,y) a) 
	where x = 0 
	{
	     l = (x == y) ?
	       sqrt(a) :
               (1.0 / c * a);
	}

	// implementation that uses region from (0,0) to the box adjacent to the right of the entry
	to (L.cell(x,y) l) 
	from (L.region(0, 0, x, y + 1) r,
	L.region(0,0, x+1, y) r2,
	A.cell(x,y) a) 
	where x > 0 
	{
	     if (x > y) {
	     	l = 0;
	     } else {
	     	  double s = 0;
	     	  for (int k = 0; k < x; k++)
	     	      s += r.cell(k, y) * r.cell(k, x);
	     	  l = (x == y) ? sqrt(a - s) :
               	  	 (1.0 / r2.cell(x,x) * (a - s));
	     }			 
	}


	// straightforward implementation of cholesky
	to(L l)  from(A a) { 
 	     for (int i = 0; i < a.height(); i++) {
             	 for (int j = 0; j < (i+1); j++) {
            	     double s = 0;
            	     for (int k = 0; k < j; k++)
                     	 s += l.cell(k,i) * l.cell(k,j);
            	     l.cell(j, i) = (i == j) ?
                           sqrt(a.cell(i, i) - s) :
                           (1.0 / l.cell(j, j) * (a.cell(j, i) - s));
        	 }
	     }	
	}

*/
}

#endif // CHOLESKY_PBCC
