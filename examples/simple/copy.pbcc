#ifndef UTILITIES_PBCC
#define UTILITIES_PBCC

%{

void InlineCopy1D(const MatrixRegion1D& out, const ConstMatrixRegion1D& in){
  JASSERT(in.count()==out.count());
  for(int x=0; x<in.width(); ++x){
    out.cell(x) = in.cell(x);
  }
}

void InlineCopy2D(const MatrixRegion2D& out, const ConstMatrixRegion2D& in){
  JASSERT(in.count()==out.count());
  for(int x=0; x<in.width(); ++x){
    for(int y=0; y<in.height(); ++y){
      out.cell(x,y) = in.cell(x,y);
    }
  }
}

void InlineCopy3D(const MatrixRegion3D& out, const ConstMatrixRegion3D& in){
  JASSERT(in.count()==out.count());
  for(int x=0; x<in.width(); ++x){
    for(int y=0; y<in.height(); ++y){
      for (int z=0; z<in.depth(); ++z){
        out.cell(x,y,z) = in.cell(x,y,z);
      }
    }
  }
}

%}

transform Copy1D
from IN[n]
to OUT[n]
{
  OUT.cell(i) from (IN.cell(i) x)
  {
    return x;
  }
}

transform Copy3D
from IN[w,h,d]
to OUT[w,h,d]
{
  OUT.cell(i,j,k) from (IN.cell(i,j,k) x)
  {
    return x;
  }
}

transform Copy2D //last for regression tests
from IN[w,h]
to OUT[w,h]
{
  OUT.cell(i,j) from (IN.cell(i,j) x)
  {
    return x;
  }
}

#endif // UTILITIES_PBCC

