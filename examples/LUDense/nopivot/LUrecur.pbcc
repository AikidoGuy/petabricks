#ifndef LURECUR_PBCC
#define LURECUR_PBCC

#include "LUnopivot.pbcc"
#include "../../multiply/multiply.pbcc"
#include "../../simple/add.pbcc"
#include "../../trisolve/TriSolveLL.pbcc"
#include "../../trisolve/TriSolveRU.pbcc"

transform LUblock
from IN[n, n]
to OUT[n, n]
{
  //get LU of upper left block by recursion
  to (OUT.region(0,0,n/2,n/2) out)
  from (IN.region(0,0,n/2,n/2) in)
  {
    LUrecur(out,in);
  }

  //upper right block
  to (OUT.region(n/2,0,n,n/2) out)
  from (IN.region(n/2,0,n,n/2) in,
	OUT.region(0,0,n/2,n/2) leftdiag)
  {
    TriSolveLL(out, 1, leftdiag, in);
  }

  //lower left block
  to (OUT.region(0,n/2,n/2,n) out)
  from (IN.region(0,n/2,n/2,n) in,
        OUT.region(0,0,n/2,n/2) updiag)
  {
    TriSolveRU(out, 0, updiag, in);
  }

  //lower right block
  to (OUT.region(n/2,n/2,n,n) out)
  from (IN.region(n/2,n/2,n,n) in,
        OUT.region(n/2,0,n,n/2) up,
        OUT.region(0,n/2,n/2,n) left)
  {
    // out = in - left*up (this updates the lower right block)
    Copy2D(out, in);
    MatrixMultiplyAdd(out, -1, left, up, 1);

    //recursion to get LU of the remaining updated block
    LUrecur(out, out);
  }
}

transform LUrecur
from IN[n,n]
to OUT[n,n]
{
  to (OUT out) from (IN in)
  {
    if (n == 1) {
      out.cell(0,0) = in.cell(0,0);
    } else {
      LUblock(out,in);
    }
  }

  to (OUT out) from (IN in)
  {
    LUnopivot(out,in);
  }
}

#endif // LURECUR_PBCC
