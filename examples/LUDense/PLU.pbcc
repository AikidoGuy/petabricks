#ifndef PLU_PBCC 
#define PLU_PBCC

#include "../simple/copy.pbcc"
transform PLUwork
from IN[n,m]
to OUT[n,m]
{

  primary OUT.cell(j,0) from (IN.cell(j,0) in)
  {
        return in;
  }

  OUT.cell(0,j) from (IN.cell(0,j) in, IN.cell(0,0) diag)
  {
        return in/diag;
  }


  secondary OUT.cell(j,i)
  from (IN.cell(j,i) aPrev,
        OUT.cell(0,i) left,
        IN.cell(j,0) up)
  {
        return aPrev - left * up;
  }

}



transform PLUinner
from IN[n,m], Pin[m]
through TEMP[n,m], Ptemp[m]
to OUT[n,m], Pout[m]
{

   to (OUT out, Pout pout, TEMP temp, Ptemp ptemp) from (IN in, Pin pin)
   {
	ElementT MaxElement;
	int MaxIndex;
	int minmn;
        int j;
	int k;
	
	Copy2D(temp, in);
	Copy1D(ptemp, pin);

	if ( m >= n ) {
		minmn=n;
	}
	else {
		minmn=m;
	}

	for (j=0; j<minmn; j++)
	{
		MaxElement=temp.cell(j,j);
        	MaxIndex=j;
        	for (k=j+1; k<m; k++)
        	{
	  		if (temp.cell(j,k) > MaxElement){
			MaxElement=temp.cell(j,k);
			MaxIndex=k;
	  		}
        	}

        	pout.cell(j)=ptemp.cell(MaxIndex);
        	Copy1D(out.row(j), temp.row(MaxIndex));
        	for (k=j+1; k<m; k++)
        	{
	    		if (k==MaxIndex) 
	    		{
				pout.cell(k)=ptemp.cell(j);
				Copy1D(out.row(k),temp.row(j));
	    		}
	    		else
	    		{
				pout.cell(k)=ptemp.cell(k);
				Copy1D(out.row(k), temp.row(k));
	    		}
        	}
		
		Copy1D(ptemp,pout);
		Copy2D(temp,out);
		
		PLUwork(temp.region(j,j,n,m),out.region(j,j,n,m));
		
		if (j == minmn-1) {  Copy2D(out.region(j,j,n,m),temp.region(j,j,n,m)); }
    	}
   }
}

transform PLUnoblock
from IN[n,m], Pin[m]
to OUT[n,m], Pout[m]
{
 

/*
   to (OUT out, Pout pout) from (IN in, Pin pin)
   {
      if (m==1 || n==1 )
      {
	PLUwork(out, in);
        //out.cell(0,0)=in.cell(0,0);
        Copy1D(pout, pin);
      }
      else
      {
        PLUinner(out, pout, in, pin);
      }
   }
*/

   to (OUT out, Pout pout) from (IN in, Pin pin)
   {
        PLUinner(out, pout, in, pin);
   }


}

transform PLU
from IN[n,m]
through Pinitial[m]
to OUT[n,m], P[m]
{
   Pinitial.cell(j) from() { return j;}

   to (OUT out, P pout) from (IN in, Pinitial pin)
   {
       PLUinner(out, pout, in, pin);
       //PLUnoblock(out,pout,in,pin);
   }
}


#endif // PLU_PBCC
