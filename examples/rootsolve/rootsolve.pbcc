#ifndef ROOTSOLVE_PBCC
#define ROOTSOLVE_PBCC

#ifndef k
#define k 10
#endif

#include "evalf.pbcc"

transform Bisection
from F[n], A, B, C, FA, FB, FC 
through FMID
to Aout, Bout, Cout, FAout, FBout, FCout
{
   to (Aout aout, Bout bout, Cout cout, FAout faout, FBout fbout, FCout fcout, FMID fmid) 
   from (F f, A a, B b, C c, FA fa, FB fb, FC fc)
   {
	double temp;
	ElementT mid=(a+b)/2;
	evalf(fmid,f,mid);

	//bisection step
	if (fa * fmid < 0) {
		bout = mid;
		fbout=fmid;
		aout=a;
		faout=fa;
	}
	else  {
		aout = mid;
		faout =fmid;
		bout=b;
		fbout=fb;
	}

        //set c to the old b
        cout = b;
        fcout = fb;

   	//switch a and b if a is a better root
	if ( fabs(fbout) > fabs(faout) ) {
		temp=bout; bout=aout; aout=temp;
		temp=fbout; fbout=faout; faout=temp;
		cout=aout;fcout=faout;
	}
   }
}


transform Secant
from F[n], A, B, C, FA, FB, FC
to Aout, Bout, Cout, FAout, FBout, FCout
{
   to (Aout aout, Bout bout, Cout cout, FAout faout, FBout fbout, FCout fcout)
   from (F f, A a, B b, C c, FA fa, FB fb, FC fc)
   {
	double temp;        

	//secant step
	bout=b- (b-c)/(fb-fc) *fb;
        evalf(fbout,f,bout);

        //set c to the old b
        cout = b;
        fcout = fb;

	//if sign of f(b) change, set a equal to the old b to maintain a bracketing interval
	if (faout*fbout > 0 ) {
		aout=b;
		faout=fb;
	}
	else {
		aout=a;
		faout=fa;
	}

        //switch a and b if a is a better root
        if ( fabs(fbout) > fabs(faout) ) {
                temp=bout; bout=aout; aout=temp;
                temp=fbout; fbout=faout; faout=temp;
                cout=aout;fcout=faout;
        }
  
  }

}



transform RootSolve
from F[n], Astart, Bstart
through B[k], A[k], C[k], FA[k], FB[k], FC[k]
to X, FX
{

   to (FA.cell(0) fa)  from (F f, Astart a){
	evalf(fa, f, a);
   }


   to (FB.cell(0) fb)  from (F f, Bstart b){
        evalf(fb, f, b);
   }
   
   FC.cell(0) from (FA.cell(0) fa) {
	return fa;
   }

   A.cell(0) from (Astart a){
        return a;
   }
   
   B.cell(0) from (Bstart b){
        return b;
   }
   
   C.cell(0) from (Astart a){
	return a;
   }


   to (A.cell(i) a, B.cell(i) b, C.cell(i) c, FA.cell(i) fa, FB.cell(i) fb, FC.cell(i) fc) 
   from (A.cell(i-1) aold, B.cell(i-1) bold, C.cell(i-1) cold, FA.cell(i-1) faold, FB.cell(i-1) fbold, FC.cell(i-1) fcold, F f) 
   { 
	Bisection(a,b,c,fa,fb,fc,  f,aold,bold,cold,faold,fbold,fcold);
   }

   to (A.cell(i) a, B.cell(i) b, C.cell(i) c, FA.cell(i) fa, FB.cell(i) fb, FC.cell(i) fc)
   from (A.cell(i-1) aold, B.cell(i-1) bold, C.cell(i-1) cold, FA.cell(i-1) faold, FB.cell(i-1) fbold, FC.cell(i-1) fcold, F f)
   {
       Secant(a,b,c,fa,fb,fc,  f,aold,bold,cold,faold,fbold,fcold);
   }



   X from (B.cell(k-1) blast){
	return blast;
   }
			
   to (FX fx)  from ( F f, X x){
	evalf(fx, f,x);
   }


}


#endif // ROOTSOLVE_PBCC
