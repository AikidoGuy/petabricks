#ifndef QR_PBCC
#define QR_PBCC

#include "../simple/macros.h"
#include "../simple/copy.pbcc"
#include "../simple/norm.pbcc"
#include "../simple/scale.pbcc"
#include "../multiply/multiply.pbcc"
#include "../multiply/triMultiply.pbcc"
#include "QRLAPACK.pbcc"

transform Init1D
from VALUE
to A[n]
{
    to (A.cell(i) a) from (VALUE val)
    {
        a = val;
    }
}

transform Init2D
from VALUE
to A[n,m]
{
    to (A.cell(j,i) a) from (VALUE val)
    {
        a = val;
    }
}

// compute actual Q and R matrices from the LAPACK representation generated
// by QRR
transform QRRConvert
from TAU[n]
to Q[n,m], R[n,n]
{
    to (Q q, R r) from (TAU tau)
    {
        IndexT i, j;
        Copy2D(r, q.region(0, 0, n, MIN(m,n)));
        for (i = 1; i < n; ++i) {
            for (j = 0; j < i; ++j) {
                r.cell(j, i) = 0;
            }
        }
        QRRConvertLAPACK(q, q, tau);
    }

    // TODO: implement native Petabricks version
}

// base version, similar to DGEQR2
transform QRRBase
to A[n,m], TAU[n]
{
    // right-looking version
    to (A a, TAU tau) from ()
    {
        IndexT i;
        ElementT alpha, beta, xnorm;
        MatrixRegion2D v, a2, work, w2;
        work = MatrixRegion2D::allocate(1, n);
        for (i = 0; i < n; ++i) {

            // if last row, we're done
            if (i >= m-1) {
                tau.cell(i) = 0;
                break;
            }

            Norm1D(xnorm, a.column(i).region(i+1, m), 2.0);
            if (xnorm == 0.0) {
                tau.cell(i) = 0;
                continue;
            }

            // compute reflector
            alpha = a.cell(i, i);
            beta = sqrt(alpha * alpha + xnorm * xnorm);
            beta = alpha > 0 ? -beta : beta;
            tau.cell(i) = (beta - alpha) / beta;
            Scale2D(a.region(i, i+1, i+1, m), 1.0 / (alpha - beta));

            // if last column, we're done
            if (i >= n-1) {
                a.cell(i, i) = beta;
                break;
            }

            v  = a.region(i  , i, i+1, m);
            a2 = a.region(i+1, i, n  , m);
            w2 = work.region(0, i+1, 1, n);

            // apply reflector to trailing matrix
            a.cell(i, i) = 1;
            MatrixMultiply(w2, a2.transposed(), v);
            MatrixMultiplyAdd(a2, -tau.cell(i), v, w2.transposed(), 1.0);
            a.cell(i, i) = beta;
        }
    }

    // call LAPACK
    to (A a, TAU tau) from ()
    {
        QRRLAPACK(a, tau, a);
    }
}

// compute triangular factor T from block reflector matrix V
// similar to DLARFT
transform QRRTriFact
from TAU[k]
to T[k,k], V[k,m]
{
    to (T t, V v) from (TAU tau)
    {
        IndexT i;
        for (i = 0; i < k; ++i) {
            if (tau.cell(i) == 0) {
                Init2D(v.region(i, 0, i+1, i), 0);
                continue;
            }
            if (i > 0) {
                ElementT vii = v.cell(i, i);
                v.cell(i, i) = 1;
                MatrixMultiplyAdd(t.region(i, 0, i+1, i), -tau.cell(i),
                                  v.region(0, i, i  , m).transposed(),
                                  v.region(i, i, i+1, m), 0.0);
                v.cell(i, i) = vii;
                TriMatrixMultiplyInPlace(t.region(i, 0, i+1, i), 1, 0,
                                         t.region(0, 0, i  , i));
            }
            t.cell(i, i) = tau.cell(i);
        }
    }
}

// in-place left multiply by block reflector: C = (I - V*T*V') * C.
// pass UPFLAG=1 if T is upper-triangular, 0 otherwise.
// similar to DLARFB
transform QRRMult
from UPFLAG, V[b,m], T[b,b]
to C[n,m]
{
    to (C c) from (UPFLAG upFlag, V v, T t)
    {
        MatrixRegion2D w, c1, c2;
        ConstMatrixRegion2D v1, v2;

        // allocate work array
        w = MatrixRegion2D::allocate(n,b);

        // aliases
        c1 = c.region(0,0,n,b);
        c2 = c.region(0,b,n,m);
        v1 = v.region(0,0,b,b);
        v2 = v.region(0,b,b,m);

        // STEP 1: Compute w = v' * c = (v1' * c1 + v2' * c2)
        //   a) w = v1' * c1
        TriMatrixMultiply(w, 1, 1, v1.transposed(), c1);
        //   b) w += v2' * c2
        MatrixMultiplyAdd(w, 1.0, v2.transposed(), c2, 1.0);

        // STEP 2: Compute w = t * w
        TriMatrixMultiply(w, upFlag, 0, t, w);

        // STEP 3: Compute c = c - v * w
        //   a) c1 = c1 - v1 * w
        TriMatrixMultiplyAdd(c1, 0, 1, -1.0, v1, w, 1.0);
        //   b) c2 = c2 - v2 * w
        MatrixMultiplyAdd(c2, -1.0, v2, w, 1.0);
    }
}

// tunable blocked version of QRR
transform QRRBlocked
to A[n,m], TAU[n]
tunable blockSize
{
    to (A a, TAU tau) from ()
    {
        //base case
        if (blockSize < 1 || blockSize >= MIN(m,n)) {
            QRRBase(a, tau);
            return;
        }

        MatrixRegion1D tau1, tau2;
        MatrixRegion2D a1, a2, a22, t;
        t = MatrixRegion2D::allocate(blockSize, blockSize);

        a1  = a.region(0, 0, blockSize, m);
        a2  = a.region(blockSize, 0, n, m);
        a22 = a.region(blockSize, blockSize, n, m);

        tau1 = tau.region(0, blockSize);
        tau2 = tau.region(blockSize, n);

        // compute QR of left block
        QRRBase(a1, tau1);

        // compute triangular factor of block reflector
        QRRTriFact(t, a1, tau1);

        // apply transposed block reflector to trailing matrix
        QRRMult(a2, 0, a1, t.transposed());

        // factor trailing matrix
        QRRBlocked(a22, tau2);
    }
}

// Perform an in-place LAPACK-style QR using Householder reflections.
//
// On entry, A contains the matrix to be factored; on exit, the upper triangular
// part of A contains R, and the lower triangular part (along with TAU) contains
// a representation of the k elementary reflectors whose product is Q.
//
// See LAPACK documentation for DGEQRF for more details.
transform QRR
to A[n,m], TAU[n]
{
//  // call recursive version
//  to (A a, TAU tau) from ()
//  {
//      QRRRecursive(a, tau);
//  }

    // call blocked version
    to (A a, TAU tau) from ()
    {
        QRRBlocked(a, tau);
    }

    // call base version
    to (A a, TAU tau) from ()
    {
        QRRBase(a, tau);
    }
}

// On entry, Q contains the matrix to be factored; on exit, it contains Q.
transform QRInPlace
to Q[n,m], R[n,n]
{
    // Householder
    to (Q q, R r) from ()
    {
        MatrixRegion1D tau = MatrixRegion1D::allocate(n);
        QRR(q, tau);
        QRRConvert(q, r, tau);
    }
}

transform QR
from A[n,m]
to Q[n,m], R[n,n]
{
    to (Q q, R r)
    from (A a)
    {
        Copy2D(q, a);
        QRInPlace(q, r);
    }
}

#endif // QR_PBCC
