#ifndef QR_PBCC
#define QR_PBCC

#include "../simple/addInPlace.pbcc"
#include "../simple/copy.pbcc"
#include "../simple/norm.pbcc"
#include "../simple/scale.pbcc"

transform Init2D
from VALUE
to A[n,m]
{
    to (A.cell(j,i) a) from (VALUE val)
    {
        a = val;
    }
}

transform DotProduct
from A[n], B[n]
to RESULT
{
    to (RESULT result)
    from (A a, B b)
    {
        result = 0;
        for (IndexT i = 0; i < n; ++i) {
            result += a.cell(i) * b.cell(i);
        }
    }
}

transform QRInPlace
to Q[n,m], R[n,n]
{
    // TODO: Householder

    // Gram-Schmidt
    to (Q q, R r) from ()
    {
        IndexT i, j;
        Init2D(r, 0);
        for (i = 0; i < n; ++i) {
            Norm1D(r.cell(i, i), q.col(i), 2.0);
            printf("norm of col %d is %g\n", i, r.cell(i, i));
            Scale1D(q.col(i), 1.0 / r.cell(i, i));
            for (j = i + 1; j < n; ++j) {
                DotProduct(r.cell(j, i), q.col(i), q.col(j));
                AddInPlace1D(q.col(j), -r.cell(j, i), q.col(i), 1.0);
            }
        }
    }
}

transform QR
from A[n,m]
to Q[n,m], R[n,n]
{
    to (Q q, R r)
    from (A a)
    {
        Copy2D(q, a);
        QRInPlace(q, r);
    }
}

#endif // QR_PBCC
