#ifndef CGINTERIOR_PBCC
#define CGINTERIOR_PBCC

#include "demv.pbcc"
#include "vectoradd.pbcc"
#include "dotproduct.pbcc"


transform CG_inner
from IN[n], A[n,n], R[n], D[n]
through AD[n], ALPHA,BETA, RDOTR
to OUT[n],RR[n],DD[n]
{
   to (AD ad) from (A a, D d)
   {
   	demv(ad, a, d);
   }

   to (RDOTR RdotR) from (R r)
   {
   	DotProduct(RdotR, r, r);
   }

   to (ALPHA alpha) from(RDOTR r2, D d, AD ad)
   {
	DotProduct(alpha,d,ad);
	alpha=r2/alpha;
   }

   OUT.cell(i) from(IN.cell(i) x, ALPHA alpha, D.cell(i) d)
   {
   	return x + alpha *d;
   }
  
   RR.cell(i) from(R.cell(i) r, ALPHA alpha, AD.cell(i) ad)
   {
   	return r - alpha*ad;
   }

   to (BETA beta) from(RR rr, RDOTR r2old)
   {
   	DotProduct(beta, rr,rr);
	beta=beta/r2old;
   }

   DD.cell(i) from(RR.cell(i) rr, BETA beta, D.cell(i) d)
   {
   	return rr + beta*d;
   }



}

transform CGInterior
from IN[n], A[n,n], R[n], D[n], numIterations
to OUT[n],RR[n],DD[n]
{
  	

  recursive
  to(OUT o, RR rr, DD dd) from(IN in, A a, R r, D d,numIterations k)
  {
    SPAWN(CG_inner,o, rr, dd, in, a, r,d);
    if (k > 1){
      SYNC();
      SPAWN(CGInterior,o, rr, dd, o, a, rr, dd,k - 1);
    }
  }
}

#endif // CGINTERIOR_PBCC
