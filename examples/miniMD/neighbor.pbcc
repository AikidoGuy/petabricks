#ifndef MD_NEIGHBOR_PBCC
#define MD_NEIGHBOR_PBCC

#define PAGESIZE 10000
#define ONEATOM 1000
#define PAGEDELTA 1
#define FACTOR 0.999
#define SMALL 1.0e-6

function neighbor_setup
from cutneigh[1], nbin[3], atom_world_bounds[3,2]
to binsize[3], bininv[3], mbins[1], cutneighsq[1]
{
  int i,j,k,nmax;
  double coord;
  int mbinxhi,mbinyhi,mbinzhi;
  int nextx,nexty,nextz;
 
  cutneighsq.cell(0) = cutneigh.cell(0)*cutneigh.cell(0);
 
  double xprd = ndimentions.cell(0);//atom_box_prd.cell(0);
  double yprd = ndimentions.cell(1);
  double zprd = ndimentions.cell(2);

  // binsize and bin inv for x, y, and z 
  binsize.cell(0) = xprd/nbin.cell(0);
  binsize.cell(1) = yprd/nbin.cell(1);
  binsize.cell(2) = zprd/nbin.cell(2);
  bininv.cell(0) = 1.0 / binsize.cell(0);
  bininv.cell(1) = 1.0 / binsize.cell(1);
  bininv.cell(2) = 1.0 / binsize.cell(2);

  coord = atom_world_bounds.cell(0,0) - cutneigh.cell(0) - SMALL*xprd;
  mbinxlo = (coord*bininvx);
  if (coord < 0.0) mbinxlo = mbinxlo - 1;
  coord = atom_world_bounds.cell(0,1) + cutneigh + SMALL*xprd;
  mbinxhi = (coord*bininvx);

  coord = atom_world_bounds.cell(1,0) - cutneigh - SMALL*yprd;
  mbinylo = (coord*bininvy);
  if (coord < 0.0) mbinylo = mbinylo - 1;
  coord = atom_world_bounds.cell(1,1) + cutneigh + SMALL*yprd;
  mbinyhi = (coord*bininvy);

  coord = atom_world_bounds.cell(2,0) - cutneigh - SMALL*zprd;
  mbinzlo = (coord*bininvz);
  if (coord < 0.0) mbinzlo = mbinzlo - 1;
  coord = atom_world_bounds.cell(2,1) + cutneigh + SMALL*zprd;
  mbinzhi = (coord*bininvz);

/* extend bins by 1 in each direction to insure stencil coverage */

  mbinxlo = mbinxlo - 1;
  mbinxhi = mbinxhi + 1;
  mbinx = mbinxhi - mbinxlo + 1;

  mbinylo = mbinylo - 1;
  mbinyhi = mbinyhi + 1;
  mbiny = mbinyhi - mbinylo + 1;

  mbinzlo = mbinzlo - 1;
  mbinzhi = mbinzhi + 1;
  mbinz = mbinzhi - mbinzlo + 1;

  /*
compute bin stencil of all bins whose closest corner to central bin
  is within neighbor cutoff
ifor partial Newton (newton = 0),
  stencil is all surrounding bins including self
for full Newton (newton = 1),
 b stencil is bins to the "upper right" of central bin, does NOT include self
next(xyz) = how far the stencil could possibly extend
factor < 1.0 for special case of LJ benchmark so code will create
  correct-size stencil when there are 3 bins for every 5 lattice spacings
  */
  /*
  nextx = (cutneigh*bininvx);
  if (nextx*binsizex < FACTOR*cutneigh) nextx++;
  nexty = (cutneigh*bininvy);
  if (nexty*binsizey < FACTOR*cutneigh) nexty++;
  nextz = (cutneigh*bininvz);
  if (nextz*binsizez < FACTOR*cutneigh) nextz++;

  nmax = (nextz+1) * (2*nexty+1) * (2*nextx+1);
  1DRegion stencil = [nmax]
  //have each element in stencil point to a bin id_num
  
  nstencil = 0;
  for (k = 0; k <= nextz; k++) {
    for (j = -nexty; j <= nexty; j++) {
      for (i = -nextx; i <= nextx; i++) {
	if (k > 0 || j > 0 || (j == 0 && i > 0)) {
	  if (bindist(i,j,k) < cutneighsq) {
	    stencil[nstencil] = i,j,k;
	    nstencil++;
	  }
	}
      }
    }
  }
  */
  mbins.cell(0) = mbinx * mbiny * mbinz;

}


/* binned neighbor list construction with full Newton's 3rd law
   every pair stored exactly once by some processor
   each owned atom i checks its own bin and other bins in Newton stencil */

function neighbor_build
from atom_x[natoms,3]
to
{
  int i,j,k,m,n,ibin,nlocal,nall,npnt;
  double xtmp,ytmp,ztmp,delx,dely,delz,rsq;
  
  //nall = natoms + nghosts;

  /* bin local & ghost atoms */

  binatoms();

  /* loop over each atom, storing neighbors */

  for (i = 0; i < natoms; i++) {    
    xtmp = atom_x.cell(i,0);
    ytmp = atom_x.cell(i,1);
    ztmp = atom_x.cell(i,2);

    /* loop over rest of atoms in i's bin, ghosts are at end of linked list
       if j is owned atom, store it, since j is beyond i in linked list
       if j is ghost, only store if j coords are "above and to the right" of i
    */
    
    /* loop through binned_atoms, adding the index of atoms that fall into the neighbor threshold to neighbor_atoms*/

    int bin_index = atom_to_bin.cell(i);
    int bin_size = bin_sizes.cell(i);
    int neighbor_index = atom_to_neighbor.cell(i);
    int neighbor_size = neighbor_sizes.cell(i);
    //for(int j = 0; j < bin_size; j++) {
    /*if (is ghost
	if ((atom_x.cell(bin_index,2) < ztmp) || (atom_x.cell(bin_index,2) == ztmp && atom_x.cell(bin_index,1) < ytmp) ||
	    (atom_x.cell(bin_index,2) == ztmp && atom_x.cell(bin_index,1)  == ytmp && atom_x.cell(bin_index,0) < xtmp)) {
	  continue;
	}
      }*/
    // for every atom i, locate the bin it belongs to
    // 	   get the size of the bin
    // 	   for every other atom in that bin
    //	       check if each atom is a neighbor to the current atom
    //	       if so,add its id to neighbors of this atom
    // 	       incr the number of neighbors of this atom
    // replace this with a double for loop
    // for every bin, for every atom in that bin
    for(int j = 0; j < num_bins; j++) {
    	    int num_atoms_in_bin = bin_sizes.cell(j);
    	    for (int k = 0; k < num_atoms_in_bin; k ++) {
      int other_atom_i = bins(bin_index).cell(0);
      delx = xtmp - x_atom.cell(other_atom_i,0);
      dely = ytmp - x_atom.cell(other_atom_i,1);
      delz = ztmp - x_atom.cell(other_atom_i,2);
      rsq = delx*delx + dely*dely + delz*delz;
      if (rsq <= cutneighsq) {
      	 neighbor_atoms.row(i) = atom_x.row(j);
    	 neighbor_sizes_out.cell(i) = neighbor_size.cell(i) + 1;
    }

    /* loop over all atoms in other bins in stencil, store every pair */

    ibin = coord2bin(xtmp,ytmp,ztmp);
    for (k = 0; k < nstencil; k++) {
      j = bins.cell(stencil.cell(k));
      while (j >= 0) {
	delx = xtmp - atom_x.cell(j,0);
	dely = ytmp - atom_x.cell(j,1);
	delz = ztmp - atom_x.cell(j,2);
	rsq = delx*delx + dely*dely + delz*delz;
	if (rsq <= cutneighsq) {
	   neighbor_atoms.cell(neighbor_index, neighbor_size) = atom_x.cell(neighbor_index, neighbor_size);
	   neighbor_sizes_out.cell(i) = neighbor_size.cell(i) + 1;
	}
      }
    }
    
  }
}



/* bin atoms */

function bin_atoms
from atom_x[natoms, 3]
to bins, atom_to_bin_index
{
  int i,ibin,nlocal,nall;
  int atom_index, bin_index;

  for (i = 0; i < natoms; i++) {

    ix = (int) (atom_x.cell(i,0)*bininvx) - mbinxlo;
    iy = (int) (atom_x.cell(i,1)*bininvy) - mbinylo;
    iz = (int) (atom_x.cell(i,2)*bininvz) - mbinzlo;
    bin_index =  iz*mbiny*mbinx + iy*mbinx + ix + 1;
    atom_index = bin_size.cell(bin_index);
    bins.(bin_index) = atom_x.cell(bin_index, atom_index);
    atom_to_bin_index.cell(atom_index) = bin_index;
    bin_size_out.cell(bin_index) = atom_index + 1;
  }

}

      
/* compute closest distance between central bin (0,0,0) and bin (i,j,k) */

function bindist
from xyz[3]
to dist[1]
{

double delx,dely,delz;
i = xyz.cell(0);
j = xyz.cell(1);
k = xyz.cell(2);

if (i > 0)
  delx = (i-1)*binsizex;
else if (i == 0)
  delx = 0.0;
else
  delx = (i+1)*binsizex;

if (j > 0)
  dely = (j-1)*binsizey;
else if (j == 0)
  dely = 0.0;
else
  dely = (j+1)*binsizey;

if (k > 0)
  delz = (k-1)*binsizez;
else if (k == 0)
  delz = 0.0;
else
  delz = (k+1)*binsizez;
 
 dist.cell(0) = (delx*delx + dely*dely + delz*delz)
}

#endif //MD_NEIGHBOR_PBCC


      
/* convert xyz atom coords into local bin #
   take special care to insure ghost atoms with
   coord >= prd or coord < 0.0 are put in correct bins */
/*
function coord2bin
from coords[3]
to bin_index[3]
{
  int ix,iy,iz;
  double x = coords.cell(0); 
  double y = coords.cell(1);
  double z = coords.cell(2);


  if (x >= xprd)  
  else if (x >= 0.0)
    ix = (int) (x*bininvx) - mbinxlo;
  else
    ix = (int) (x*bininvx) - mbinxlo - 1;
  
  if (y >= yprd)
  else if (y >= 0.0)
    iy = (int) (y*bininvy) - mbinylo;
  else
    iy = (int) (y*bininvy) - mbinylo - 1;
  
  if (z >= zprd)
  
  else if (z >= 0.0)
    iz = (int) (z*bininvz) - mbinzlo;
  else
    iz = (int) (z*bininvz) - mbinzlo - 1;
}
*/
