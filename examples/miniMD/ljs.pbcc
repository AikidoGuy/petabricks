#ifndef LJS_PBCC
#define LJS_PBCC

#include "neighbor.pbcc"
#include "forces.pbcc"
#include "integrate.pbcc"
#include "thermo.pbcc"
#include "atom.pbcc"

/*
#define IA 16807
#define IM 2147483647
#define AM (1.0/IM)
#define IQ 127773
#define IR 2836
#define MASK 123459876

double random(int *idum)
{
  int k;
  double ans;

  k=(*idum)/IQ;
  *idum=IA*(*idum-k*IQ)-IR*k;
  if (*idum < 0) *idum += IM;
  ans=AM*(*idum);
  return ans;
}

#undef IA
#undef IM
#undef AM
#undef IQ
#undef IR
#undef MASK
*/

function create_atoms
from rho[1], ndimentions[3]
to
{

  /* determine loop bounds of lattice subsection that overlaps my sub-box
     insure loop bounds do not exceed nx,ny,nz */

  /*
  double alat = pow((4.0/rho),(1.0/3.0));
  int ilo = atom_box_bounds.cell(0,0)/(0.5 * alat) - 1;
  int ihi = atom_box_bounds.cell(0,1)/(0.5 * alat) + 1;
  int jlo = atom_box_bounds.cell(1,0)/(0.5 * alat) - 1;
  int jhi = atom_box_bounds.cell(1,1)/(0.5 * alat) + 1;
  int klo = atom_box_bounds.cell(2,0)/(0.5 * alat) - 1;
  int khi = atom_box_bounds.cell(2,1)/(0.5 * alat) + 1;

  ilo = MAX(ilo,0);
  ihi = MIN(ihi,2*ndimentions.cell(0)-1);
  jlo = MAX(jlo,0);
  jhi = MIN(jhi,2*ndimentions.cell(1)-1);
  klo = MAX(klo,0);
  khi = MIN(khi,2*ndimentions.cell(2)-1);
  */

  /* each proc generates positions and velocities of atoms on fcc sublattice 
       that overlaps its box
     only store atoms that fall in my box
     use atom # (generated from lattice coords) as unique seed to generate a
       unique velocity
     exercise RNG between calls to avoid correlations in adjacent atoms */
      
  double xtmp,ytmp,ztmp,vx,vy,vz;
  int i,j,k,m,n;

  for (k = 0; k <= ndimentions.cell(2); k++) {
    for (j = 0; j <= ndimentions.cell(1); j++) {
      for (i = 0; i <= ndimentions.cell(0); i++) {
            n = k*(2*ndimentions.cell(1))*(2*ndimentions.cell(0)) + j*(2*ndimentions.cell(2)) + i + 1;
            for (m = 0; m < 5; m++) random(&n);
            vx = random(&n);
            for (m = 0; m < 5; m++) random(&n);
            vy = random(&n);
            for (m = 0; m < 5; m++) random(&n);
            vz = random(&n);
            atom.addatom(xtmp,ytmp,ztmp,vx,vy,vz);
	}
    }
}

/*  int iflag = 0;
  for (k = klo; k <= khi; k++) {
    for (j = jlo; j <= jhi; j++) {
      for (i = ilo; i <= ihi; i++) {
	if (iflag) continue;
	if ((i+j+k) % 2 == 0) {
	  xtmp = 0.5*alat*i;
	  ytmp = 0.5*alat*j;
	  ztmp = 0.5*alat*k;
	  if (xtmp >= atom.box.xlo && xtmp < atom.box.xhi &&
	      ytmp >= atom.box.ylo && ytmp < atom.box.yhi &&
	      ztmp >= atom.box.zlo && ztmp < atom.box.zhi) {
            n = k*(2*ny)*(2*nx) + j*(2*nx) + i + 1;
            for (m = 0; m < 5; m++) random(&n);
            vx = random(&n);
            for (m = 0; m < 5; m++) random(&n);
            vy = random(&n);
            for (m = 0; m < 5; m++) random(&n);
            vz = random(&n);
            atom.addatom(xtmp,ytmp,ztmp,vx,vy,vz);
	  }
	}
      }
    }
  }
*/
}

function create_velocity
from t_request[1]
to atom_v[natoms, 3], atom_vold[natoms, 3]
{
  int i;

  /* zero center-of-mass motion */

  double vxtot = 0.0;
  double vytot = 0.0;
  double vztot = 0.0;
  
  for (i = 0; i < natoms; i++) {
    vxtot += atom_v.cell(i,0);
    vytot += atom_v.cell(i,1);
    vztot += atom_v.cell(i,2);
  }
  
  vxtot = vxtot/natoms;
  vytot = tmp/natoms;
  vztot = tmp/natoms;

  for (i = 0; i < natoms; i++) {
    atom_v.cell(i, 0) -= vxtot;
    atom_v.cell(i, 1) -= vytot;
    atom_v.cell(i, 2) -= vztot;
    atom_vold.cell(i,0) = atom_v.cell(i,0);
    atom_vold.cell(i,1) = atom_v.cell(i,1);
    atom_vold.cell(i,2) = atom_v.cell(i,2);
  }

  /* rescale velocities, including old ones */

  MatrixRegion1D t = MatrixRegion1D::allocate(1);
  thermo_temperature(t, atom_v, atom_vold);
  double factor = sqrt(t_request/t);
  for (i = 0; i < natoms; i++) {
    atom_v.cell(i,0) *= factor;
    atom_v.cell(i,1) *= factor;
    atom_v.cell(i,2) *= factor;
    atom_vold.cell(i,0) = atom_v.cell(i,0);
    atom_vold.cell(i,1) = atom_v.cell(i,1);
    atom_vold.cell(i,2) = atom_v.cell(i,2);
  }
}

function create_box
from dimentions[3], rho[1]
to atom_box_prd[3]
{
  double lattice = pow((4.0/rho.cell(0)),(1.0/3.0));
  atom_box_prd.cell(0) = dimentions.cell(0)*lattice;
  atom_box_prd.cell(1) = dimentions.cell(1)*lattice;
  atom_box_prd.cell(2) = dimentions.cell(2)*lattice;
}

function miniMD_main
from params[14]
to OUT[3]
{

  // define params from input
  MatrixRegion1D ndimentions = MatrixRegion1D::allocate(3);
  ndimentions.cell(0) = params.cell(0);
  ndimentions.cell(1) = params.cell(1);
  ndimentions.cell(2) = params.cell(2);
  MatrixRegion1D ntimes = MatrixRegion1D::allocate(1);
  ntimes.cell(0) = params.cell(3);
  MatrixRegion1D nbin = MatrixRegion1D::allocate(3);
  nbin.cell(0) = params.cell(4);
  nbin.cell(1) = params.cell(5);
  nbin.cell(2) = params.cell(6);
  MatrixRegion1D dt = MatrixRegion1D::allocate(1);
  dt.cell(0) = params.cell(7);
  MatrixRegion1D t_request = MatrixRegion1D::allocate(1);
  t_request.cell(0) = params.cell(8);
  MatrixRegion1D rho = MatrixRegion1D::allocate(1);
  rho.cell(0) = params.cell(9);
  MatrixRegion1D every = MatrixRegion1D::allocate(1);
  every.cell(0) = params.cell(10);
  MatrixRegion1D cutforce = MatrixRegion1D::allocate(1);
  cutforce.cell(0) = params.cell(11);
  MatrixRegion1D cutneigh = MatrixRegion1D::allocate(1);
  cutneigh.cell(0) = params.cell(12);
  MatrixRegion1D nstat = MatrixRegion1D::allocate(1);
  nstat.cell(0) = params.cell(13);


  printf("Setting up ...\n");

  // define atom params
  // in place of atom.box.xprd,yprd,zprd
  MatrixRegion1D atom_box_prd = MatrixRegion1D::allocate(3);
  MatrixRegion2D atom_box_bounds = MatrixRegion2D::allocate(3,2);
 
  create_box(atom_box_prd, ndimentions, rho);




  // define neighbor params
  MatrixRegion1D binsize = MatrixRegion1D::allocate(3);
  MatrixRegion1D bininv = MatrixRegion1D::allocate(3);
  MatrixRegion2D mbin = MatrixRegion2D::allocate(3,2);  // x y z, lo hi
  MatrixRegion1D cutneighsq = MatrixRegion1D::allocate(1);

  ////// TO DO
  // setup for neighbors and comm needs to be fixed
  //neighbor_setup(binsize, bininv, mbin, cutneighsq, cutneigh, nbin, atom_box_prd, atom_box_bounds);
  //comm_setup??
  //////////////




  // define force parameters
  MatrixRegion1D cutforcesq = MatrixRegion1D::allocate(1);

  //define integrate parameters
  MatrixRegion1D dtforce = MatrixRegion1D::allocate(1);

  //define thermo parameters
  MatrixRegion1D maxstat = MatrixRegion1D::allocate(1); 

  integrate_setup(dtforce, dt);
  forces_setup(cutforcesq, cutforce);
  thermo_setup(maxstat, ntimes, nstat);

  //define thermo paramters
  int thermo_nentries = maxstat.cell(0);
  MatrixRegion1D steparr = MatrixRegion1D::allocate(thermo_nentries);
  MatrixRegion1D temparr = MatrixRegion1D::allocate(thermo_nentries);
  MatrixRegion1D engarr = MatrixRegion1D::allocate(thermo_nentries);
  MatrixRegion1D prsarr = MatrixRegion1D::allocate(thermo_nentries);




  int natoms = 4.0 * ndimentions.cell(0) * ndimentions.cell(1) * ndimentions.cell(2);
  //create_atoms(atom,in.nx,in.ny,in.nz,in.rho);
  //if (flag && prompt()) continue;

  MatrixRegion2D atom_v = MatrixRegion1D::allocate(natoms, 3);
  MatrixRegion2D atom_vold = MatrixRegion1D::allocate(natoms, 3)
  create_velocity(atom_v, atom_vold, t_request);



  //neighbor.build(atom);
  //thermo.compute(0,atom,neighbor,force);


  
  printf("Starting dynamics...\n");
  //timer.barrier_start(TIME_TOTAL);
  //integrate.run(atom,force,neighbor,comm,thermo,timer);
  //timer.barrier_stop(TIME_TOTAL);
  //thermo.compute(-1,atom,neighbor,force);
  //output(in,atom,force,neighbor,comm,thermo,integrate,timer);
  //prompt();

  int i;
  for (i; i < 1; i ++)
      OUT.cell(i) = natoms;     
}

#endif // LJS_PBCC
