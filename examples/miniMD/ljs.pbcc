#ifndef LJS_PBCC
#define LJS_PBCC

#include "neighbor.pbcc"
#include "forces.pbcc"
#include "integrate.pbcc"
#include "thermo.pbcc"
#include "atom.pbcc"


function miniMD_main
from params[14]
to OUT[3]
{

  // define params from input
  MatrixRegion1D ndimentions = MatrixRegion1D::allocate(3);
  ndimentions.cell(0) = params.cell(0);
  ndimentions.cell(1) = params.cell(1);
  ndimentions.cell(2) = params.cell(2);
  MatrixRegion1D ntimes = MatrixRegion1D::allocate(1);
  ntimes.cell(0) = params.cell(3);
  MatrixRegion1D nbin = MatrixRegion1D::allocate(3);
  nbin.cell(0) = params.cell(4);
  nbin.cell(1) = params.cell(5);
  nbin.cell(2) = params.cell(6);
  MatrixRegion1D dt = MatrixRegion1D::allocate(1);
  dt.cell(0) = params.cell(7);
  MatrixRegion1D t_request = MatrixRegion1D::allocate(1);
  t_request.cell(0) = params.cell(8);
  MatrixRegion1D rho = MatrixRegion1D::allocate(1);
  rho.cell(0) = params.cell(9);
  MatrixRegion1D every = MatrixRegion1D::allocate(1);
  every.cell(0) = params.cell(10);
  MatrixRegion1D cutforce = MatrixRegion1D::allocate(1);
  cutforce.cell(0) = params.cell(11);
  MatrixRegion1D cutneigh = MatrixRegion1D::allocate(1);
  cutneigh.cell(0) = params.cell(12);
  MatrixRegion1D nstat = MatrixRegion1D::allocate(1);
  nstat.cell(0) = params.cell(13);


  printf("Setting up ...\n");

  // define atom params
  // in place of atom.box.xprd,yprd,zprd
  //MatrixRegion1D atom_box_prd = MatrixRegion1D::allocate(3);
  //MatrixRegion2D atom_box_bounds = MatrixRegion2D::allocate(3,2);
 
  //create_box(atom_box_prd, ndimentions, rho);

  // define neighbor params
  MatrixRegion1D binsize = MatrixRegion1D::allocate(3);
  MatrixRegion1D bininv = MatrixRegion1D::allocate(3);
  MatrixRegion2D mbin = MatrixRegion2D::allocate(3,2);  // x y z, lo hi
  MatrixRegion1D cutneighsq = MatrixRegion1D::allocate(1);

  ////// TO DO
  //setup for neighbors
  //neighbor_setup(binsize, bininv, mbin, cutneighsq, cutneigh, nbin, atom_box_prd, atom_box_bounds);
  //////////////




  // define force parameters
  MatrixRegion1D cutforcesq = MatrixRegion1D::allocate(1);

  //define integrate parameters
  MatrixRegion1D dtforce = MatrixRegion1D::allocate(1);

  //define thermo parameters
  MatrixRegion1D maxstat = MatrixRegion1D::allocate(1); 

  integrate_setup(dtforce, dt);
  forces_setup(cutforcesq, cutforce);
  thermo_setup(maxstat, ntimes, nstat);

  //define thermo paramters
  int thermo_nentries = maxstat.cell(0);
  MatrixRegion1D steparr = MatrixRegion1D::allocate(thermo_nentries);
  MatrixRegion1D temparr = MatrixRegion1D::allocate(thermo_nentries);
  MatrixRegion1D engarr = MatrixRegion1D::allocate(thermo_nentries);
  MatrixRegion1D prsarr = MatrixRegion1D::allocate(thermo_nentries);




//multiply by 4?
  int natoms =  ndimentions.cell(0) * ndimentions.cell(1) * ndimentions.cell(2);
  MatrixRegion1D atom_x = MatrixRegion1D::allocate(natoms, 3);
  MatrixRegion1D atom_v = MatrixRegion1D::allocate(natoms, 3);
  create_atoms(atom_x, atom_v, rho, ndimentions);


  //if (flag && prompt()) continue;
  MatrixRegion2D atom_vold = MatrixRegion1D::allocate(natoms, 3)
  create_velocity(atom_v, atom_vold, t_request);


  neighbor.build(atom);
  thermo_compute(0,atom,neighbor,force);


  printf("Starting dynamics...\n");
  //timer.barrier_start(TIME_TOTAL);
  integrate_run(atom,force,neighbor,comm,thermo,timer);
  //timer.barrier_stop(TIME_TOTAL);
  thermo_compute(-1,atom,neighbor,force);
  //output(in,atom,force,neighbor,comm,thermo,integrate,timer);
  //prompt();

  int i;
  for (i; i < 1; i ++)
      OUT.cell(i) = natoms;     
}

#endif // LJS_PBCC
