#ifndef MULTIPLY_PBCC
#define MULTIPLY_PBCC

#include "../simple/add.pbcc"
#include "../simple/transpose.pbcc"

%{
#include "cblas.h"

#ifdef PRINT
inline void printArray(int height, int width, ElementT *array){
  int i, j;

  for(i=0; i<height; ++i) {
    for(j=0; j<width; ++j) {
      printf("%2.1lf ", array[i*width+ j]);
    }
    printf("\n");
  }
}
#endif


void gemm_wrap(int rowA, int colB1, int rowB, float alpha, float* arrayA, int colA, float* arrayB, int colB2, float beta, float* arrayAB, int colAB) {
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, rowA, colB1, rowB, alpha, arrayA, colA, arrayB, colB2, beta, arrayAB, colAB);
}

void gemm_wrap(int rowA, int colB1, int rowB, double alpha, double* arrayA, int colA, double* arrayB, int colB2, double beta, double* arrayAB, int colAB) {
  cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, rowA, colB1, rowB, alpha, arrayA, colA, arrayB, colB2, beta, arrayAB, colAB);
}
%}

transform MatrixMultiply
from A[c,h], B[w,c] 
to AB[w,h]
{
  //compute a cell the straightforward way
  AB.cell(x,y) from(A.row(y) a, B.column(x) b){
    ElementT sum=0;
    for(IndexT i=0, w=a.width(); i<w; ++i)
      sum+=a.cell(i)*b.cell(i);
    return sum;
  }

  //recursively chop the matrix in half
  recursive(c) 
  to(AB ab)
  from( A.region(0,   0, c/2, h  ) a1,
        A.region(c/2, 0, c,   h  ) a2,
        B.region(0,   0, w,   c/2) b1,
        B.region(0, c/2, w,   c  ) b2)
  {
    MatrixRegion2D tmp = MatrixRegion2D::allocate(w,h);
    spawn MatrixMultiply(ab,  a1, b1);
    spawn MatrixMultiply(tmp, a2, b2);
    sync;
    MatrixAdd(ab, ab, tmp);
  }
  
  recursive(w)
  to(AB.region(0,   0, w/2, h  ) ab1,
     AB.region(w/2, 0, w,   h  ) ab2)
  from( A a,
        B.region(0,   0, w/2, c  ) b1,
        B.region(w/2, 0, w,   c  ) b2)
  {
    spawn MatrixMultiply(ab1, a, b1);
    spawn MatrixMultiply(ab2, a, b2);
  }

  recursive(h)
  to(AB.region(0, 0,   w, h/2) ab1,
     AB.region(0, h/2, w, h  ) ab2)
  from(A.region(0,   0, c,   h/2) a1,
       A.region(0, h/2, c,   h  ) a2,
       B b)
  {
    spawn MatrixMultiply(ab1, a1, b);
    spawn MatrixMultiply(ab2, a2, b);
  }
  
  
  //Usual O(n^3) matrix multiply
  to(AB ab) from (A a, B b) {
    for(IndexT i=0, maxI=a.height(); i<maxI; ++i) {
      for(IndexT j=0, maxJ=b.width(); j<maxJ; ++j) {
        ab.cell(i,j) = 0;
        for(IndexT k=0, maxK=a.width(); k<maxK; ++k) {
	  ab.cell(i,j) += a.cell(i,k) * b.cell(k,j);
	}
      }
    }
  }
  
  to(AB ab) from (A a, B b) {
    int rowA=a.height();
    int colA=a.width();

    int rowB=b.height();
    int colB=b.width();

    int rowAB=ab.height();
    int colAB=ab.width();

    ElementT alpha=1;
    ElementT beta=0;
    
    //This is true by definition of transform:
   //if(colA != rowB) {
   //  fprintf(stderr, "Unable to perform a matrix multiplication. Wrong input size.\n"
	 //    "#columns of matrix A = %d\n"
	 //    "#rows of matrix B = %d\n"
	 //    "They should be equal!\n", colA, rowB);
   //  exit(4);
   //}
    
    ElementT* arrayA = 0;
    ElementT* arrayB = 0;
    ElementT* arrayAB = 0;
    CArrayStorage arrayA_store;
    CArrayStorage arrayB_store;
    CArrayStorage arrayAB_store;
       
    //this will be in-place when possible:
    to_c_array(a,  arrayA,  arrayA_store);
    to_c_array(b,  arrayB,  arrayB_store);
    to_c_array(ab, arrayAB, arrayAB_store);
    gemm_wrap(rowA, colB, rowB, alpha, arrayA, colA, arrayB, colB, beta, arrayAB, colAB);
    free_c_array(arrayA,  arrayA_store);
    free_c_array(arrayB,  arrayB_store);
    from_c_array(ab, arrayAB, arrayAB_store);
  }
}

transform MatrixMultiplyTransposed
from A[n,n], B[n,n] 
through T[n,n]
to C[n,n]
{
  // no transpose
  to(C c, T t) from(A a, B b) {
    MatrixMultiply(c, a, b);
  }
  // transpose b
  to(C c, T t) from(A a, B b) {
    Transpose(t,b);
    MatrixMultiply(c, a, t.transposed());
  }
  // transpose a
  to(C c, T t) from(A a, B b) {
    Transpose(t,a);
    MatrixMultiply(c, t.transposed(), b);
  }
}

#endif // MULTIPLY_PBCC
