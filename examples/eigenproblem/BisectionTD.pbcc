#ifndef BISECTIONTD_PBCC
#define BISECTIONTD_PBCC

%{

extern "C" void dsytrd_(char *uplo, int *n, double *a, int *lda, double *d, double *e, double *tau, double *work, int *lwork, int *info);
extern "C" void ssytrd_(char *uplo, int *n, float *a, int *lda, float *d, float *e, float *tau, float *work, int *lwork, int *info);

extern "C" void dstebz_(char *range, char *order, int *n, double *vl, double *vu, int *il, int *iu, double *abstol, double *d, double *e, int *m, int *nsplit, double *w, int *iblock, int *isplit, double *work, int *iwork, int *info);
extern "C" void sstebz_(char *range, char *order, int *n, float *vl, float *vu, int *il, int *iu, float *abstol, float *d, float *e, int *m, int *nsplit, float *w, int *iblock, int *isplit, float *work, int *iwork, int *info);

extern "C" void dstein_(int *n, double *d, double *e, int *m, double *w, int *iblock, int *isplit, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info);
extern "C" void sstein_(int *n, float *d, float *e, int *m, float *w, int *iblock, int *isplit, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info);

extern "C" void dormtr_(char *side, char *uplo, char *trans, int *m, int *n, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info);
extern "C" void sormtr_(char *side, char *uplo, char *trans, int *m, int *n, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info);

void sytrd_wrap(char *uplo, int *n, double *a, int *lda, double *d, double *e, double *tau, double *work, int *lwork, int *info) {
  dsytrd_(uplo, n, a, lda, d, e, tau, work, lwork, info);
}
void sytrd_wrap(char *uplo, int *n, float *a, int *lda, float *d, float *e, float *tau, float *work, int *lwork, int *info) {
  ssytrd_(uplo, n, a, lda, d, e, tau, work, lwork, info);
}

void stebz_wrap(char *range, char *order, int *n, double *vl, double *vu, int *il, int *iu, double *abstol, double *d, double *e, int *m, int *nsplit, double *w, int *iblock, int *isplit, double *work, int *iwork, int *info) {
  dstebz_(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info);
}
void stebz_wrap(char *range, char *order, int *n, float *vl, float *vu, int *il, int *iu, float *abstol, float *d, float *e, int *m, int *nsplit, float *w, int *iblock, int *isplit, float *work, int *iwork, int *info) {
  sstebz_(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info);
}

void stein_wrap(int *n, double *d, double *e, int *m, double *w, int *iblock, int *isplit, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info) {
  dstein_(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info);
}
void stein_wrap(int *n, float *d, float *e, int *m, float *w, int *iblock, int *isplit, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info) {
  sstein_(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info);
}

void ormtr_wrap(char *side, char *uplo, char *trans, int *m, int *n, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info) {
  dormtr_(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info);
}
void ormtr_wrap(char *side, char *uplo, char *trans, int *m, int *n, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info) {
  sormtr_(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info);
}

%}

#include "../simple/transpose.pbcc"

// Find eigenvalues and eigenvectors of input matrix IN (symmetric) by LAPACK Bisection routine
// note output is Transposed because of row-major and column major difference for LAPACK and PetaBricks
transform BisectionTD
from Diag[n], Subdiag[n-1]
//through Eigvectemp[n,n]
to Eigenvalue[n], Eigenvector[n,n]
{

  to (Eigenvalue Eig, Eigenvector Vec) from (Diag Din, Subdiag Ein)
  {
    char range = 'A';
    char order = 'B';
    int size=n;
    int info = 0;
    int il;
    int iu;
    int m;
    int nsplit;
    int nsquared=n*n;
    ElementT vl;
    ElementT vu;
    ElementT abstol=0;

    // allocate and initialize matrices
    ElementT *Z = Vec.base();
    ElementT *D = Din.storage()->data();
    ElementT *E = Ein.storage()->data();
    ElementT *work = new ElementT[4*size];
    int *iwork = new int[3*size];
    ElementT *W = Eig.base();
    int *iblock = new int[size];
    int *isplit = new int[size];
    int *ifail = new int[size];

    // call LAPACK bisection routine for tridiagonal matrix
    stebz_wrap(&range, &order, &size, &vl, &vu, &il, &iu, &abstol, D, E, &m, &nsplit, W, iblock, isplit, work, iwork, &info);

    // call LAPACK dstein routine for eigenvectors
    delete [] work;
    work = new ElementT[5*n];
    delete [] iwork;
    iwork = new int[n];
    stein_wrap(&size, D, E, &size, W, iblock, isplit, Z, &size, work, iwork, ifail, &info);

    //Transpose(VecOut,Vec);

    delete [] work;
    delete [] iwork;
    delete [] iblock;
    delete [] isplit;
    delete [] ifail;
  }

}

#endif // BISECTIONTD_PBCC
