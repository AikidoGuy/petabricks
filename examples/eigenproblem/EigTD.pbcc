#ifndef EIGTD_PBCC
#define EIGTD_PBCC

%{

extern "C" void dlaed1_(int *n, double *D, double *Q, int *ldq, int *indxq, double *rho, int *cutpnt, double *work, int *iwork, int *info);

%}


#include "../utilities.pbcc"
#include "mergeQ.pbcc"
#include "QRTD.pbcc"
#include "BisectionTD.pbcc"

transform ComputeEig
from Vec1[n1,n1],Vec2[n2,n2], RHO
to Eigenvalue[n1+n2], Eigenvector[n1+n2,n1+n2]
{
   to (Eigenvalue eig, Eigenvector vec) from (Vec1 q1, Vec2 q2, RHO b) {
	
	int i, info,size=n1+n2,cutpnt=n1,nsquared=size*size;
	double rho=b;
	double *D = eig.base();
	double *Q = vec.base();
	double *work = new double[4*size+nsquared];
	int *indxq = new int[size];
	int *iwork = new int[4*size];

        mergeQ(vec,q1,q2);


	for(i=0; i<cutpnt; i++) {
		indxq[i]=i+1;
	}
        for(i=cutpnt; i<size; i++){
		indxq[i]=i-cutpnt+1;
	}


	dlaed1_(&size, D, Q, &size, indxq, &rho, &cutpnt, work, iwork, &info);


	delete [] work;
	delete [] iwork;
	delete [] indxq;
   }
}

// Find eigenvalues and eigenvectors of input matrix T (tridiagonal symmetric)
transform EigTD
from Diag[n], Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]
{

   //Bisection
   to (Eigenvalue eig, Eigenvector vec) from  (Diag Din, Subdiag Ein) {
	BisectionTD(eig, vec, Din, Ein);
	//printf("Bisection: n = %d\n", n);
   }

   //QR Iterations
   to (Eigenvalue eig, Eigenvector vec) from  (Diag Din, Subdiag Ein){
	QRTD(eig, vec, Din, Ein);
	//printf("QR: n = %d\n", n);
   }



   //Recursive: Divide and Conquer
   recursive
   to (Eigenvalue eig, Eigenvector vec) from  (Diag Din, Subdiag Ein){
	
	int cutpnt=n/2;	
	double rho=Ein.cell(cutpnt-1);
	MatrixRegion2D q1 = MatrixRegion2D::allocate(cutpnt,cutpnt);
	MatrixRegion2D q2 = MatrixRegion2D::allocate(n-cutpnt,n-cutpnt);

	InlineCopy1D(eig, Din);

	eig.cell(cutpnt-1) -= rho;
	eig.cell(cutpnt) -= rho;

	//printf("Recursion: n = %d\n", n);

	SPAWN(EigTD, eig.region(0,cutpnt),q1,eig.region(0,cutpnt),Ein.region(0,cutpnt-1));
	SPAWN(EigTD, eig.region(cutpnt,n),q2,eig.region(cutpnt,n),Ein.region(cutpnt,n-1));
	SYNC();
	SPAWN(ComputeEig, eig, vec, q1, q2, Ein.cell(cutpnt-1));
   }


}

//transform EigTD
//from Diag[n], Subdiag[n-1]
//to Eigenvalue[n], Eigenvector[n,n]
//{
//
//  to (Eigenvalue eig, Eigenvector vec) from (Diag Din, Subdiag Ein)
//  {
//
//	InlineCopy1D(eig, Din);
//	EigTD2sub(eig, vec, Din, Ein);
//  }
//
//}

#endif // EIGTD_PBCC
