#include "extern.h"

// Find eigenvalues and eigenvectors of input matrix IN (symmetric) by LAPACK QR iterations routine
transform QRiteration
from IN[n,n]
to Eigenvalue[n], Eigenvector[n,n]
{

  to (Eigenvalue E, Eigenvector Vec) from (IN in)
  {
    char jobz = 'V', uplo = 'U';
    int size=n,lwork=-1,info = 0;

    // allocate and initialize matrices
    ElementT *A = new ElementT[n * n];
    ElementT *work = new ElementT[1];
    ElementT *W = new ElementT[n];

    // get input matrix in column major format
    int index = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        A[index++] = in.cell(i, j);
      }
    }

    // call workspace query to calculate the optimal size of the WORK array
    syevd_wrap(&jobz, &uplo, &size, A, &size, W, work, &lwork, &info);
    lwork=work[0];
    delete [] work;
    work = new ElementT[lwork];

    // call LAPACK routine dsyev for QR iteration
    syevd_wrap(&jobz, &uplo, &size, A, &size, W, work, &lwork, &info);

    // copy solution to output
    for (int i = 0; i < n; i++) {
        E.cell(i) = W[i];
    }
    index = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        Vec.cell(i,j) = A[index++];
      }
    }

    delete [] A;
    delete [] work;
    delete [] W;
  }

}

