/***************************************************************************
 *  Copyright (C) 2008-2009 Massachusetts Institute of Technology          *
 *                                                                         *
 *  This source code is part of the PetaBricks project and currently only  *
 *  available internally within MIT.  This code may not be distributed     *
 *  outside of MIT. At some point in the future we plan to release this    *
 *  code (most likely GPL) to the public.  For more information, contact:  *
 *  Jason Ansel <jansel@csail.mit.edu>                                     *
 *                                                                         *
 *  A full list of authors may be found in the file AUTHORS.               *
 ***************************************************************************/
%{
#include "formula.h"
#include "common/jconvert.h"
#include <stdio.h>
#include <map>

using namespace petabricks;

extern int yylex (void);
static int yyerror(FormulaListPtr&, const char* msg){ JASSERT(false)(msg).Text("parse error"); return 0;}

static jalib::JRefPool theRefPool;
#define REFALLOC(args...) (theRefPool.add(new args))

static void clearParserCaches(){
  theRefPool.clear();
}

%}

%union {
  bool b;
  int i;
  double d;
  const char* str;
  petabricks::Formula*        formula;
  petabricks::FormulaList*    formulas;
}

%defines
%locations
%expect 0
%name-prefix="maxima"
%start Start

%parse-param { petabricks::FormulaListPtr& ret };

%token IPROMPT OPROMPT LE GE BOOL_T BOOL_F STR_EQUAL STR_FLOOR STR_CEILING
%token <str> IDENT INTEGER FLOAT
%type <b> Bool
%type <i> Integer
%type <d> Float
%type <formula> Formula FormulaBinop
%type <formulas> OutputContent OptFormulaList FormulaList


%nonassoc '=' '<' '>' LE GE 
%left '-' '+'
%left '*' '/'
%left '^'

%%

Start: InputPrompt Start
     | OutputPrompt OutputContent InputPrompt
{
  ret = $2;
  clearParserCaches();
  return 0;
};


InputPrompt: IPROMPT;
OutputPrompt: OPROMPT;

OutputContent: Formula                 { ($$=REFALLOC(FormulaList()))->push_back($1); }
             | '[' OptFormulaList ']'  { ($$=$2); }
;


Formula: IDENT   {$$=REFALLOC( FormulaVariable($1) ); }
       | Integer {$$=REFALLOC( FormulaInteger( $1) ); }
       | Bool    {$$=REFALLOC( FormulaBool($1) ); }
       | Float   {$$=REFALLOC( FormulaFloat(  $1) );  }
       | '(' Formula ')' { $$=$2; } 
       | FormulaBinop    { $$=$1; };

FormulaBinop: Formula '+' Formula { $$=REFALLOC(FormulaBinop<'+'>($1,$3)); }
            | Formula '-' Formula { $$=REFALLOC(FormulaBinop<'-'>($1,$3)); }
            | Formula '*' Formula { $$=REFALLOC(FormulaBinop<'*'>($1,$3)); }
            | Formula '/' Formula { $$=REFALLOC(FormulaBinop<'/'>($1,$3)); }
            | Formula '=' Formula { $$=REFALLOC(FormulaBinop<'='>($1,$3)); }
            | Formula '<' Formula { $$=REFALLOC(FormulaBinop<'<'>($1,$3)); }
            | Formula '>' Formula { $$=REFALLOC(FormulaBinop<'>'>($1,$3)); }
            | Formula '^' Formula { $$=REFALLOC(FormulaBinop<'^'>($1,$3)); }
            | Formula LE  Formula { $$=REFALLOC(FormulaLE($1,$3)); }
            | Formula GE  Formula { $$=REFALLOC(FormulaGE($1,$3)); }
            | STR_EQUAL '(' Formula ',' Formula ')' { $$=REFALLOC(FormulaBinop<'='>($3,$5)); }
            | STR_FLOOR   '(' Formula ')' { $$=$3; }
            | STR_CEILING '(' Formula ')' { $$=$3; }
            | '-' Formula { $$=REFALLOC(FormulaBinop<'-'>(FormulaInteger::zero(),$2)); };

FormulaList: Formula                 { ($$=REFALLOC(FormulaList()))->push_back($1); }
           | FormulaList ',' Formula { ($$=$1)->push_back($3); };

OptFormulaList: Nil         { $$=REFALLOC(FormulaList()); }
              | FormulaList { $$=$1; };

Nil:;
Integer: INTEGER { $$=jalib::StringToX<int>($1); };
Bool: BOOL_T { $$=true;  }
    | BOOL_F { $$=false; };
Float: FLOAT { $$=jalib::StringToX<double>($1); };

%%

FormulaListPtr readFormulaFromMaxima(){
  FormulaListPtr ret;
  maximaparse(ret);
  return ret;
}

