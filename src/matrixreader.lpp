%option caseless
%option nostdinit
%option noyywrap
%option nounput
%option prefix="matrixreader"
%option outfile="lex.yy.c"

%{

#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

#include "jassert.h"
#include "jconvert.h"
#include "matrixio.h"
#include <stdio.h>
using namespace hecura;

#define YY_DECL int matrixreaderlex(MatrixReaderScratch& o)

YY_DECL;

%}

%x DATA
%x SIZE

%%

<INITIAL>{
  [ \r\t]+              //nothing
  [\n]                  //nothing
  "size"                {
    o.dimensions=0;
    BEGIN(SIZE);
  }
}

<SIZE>{
  [ \r\tx]+              //nothing
  [0-9]+                {
    JASSERT(o.dimensions+1 < MAX_DIMENSIONS)(o.dimensions)
      .Text("Input matrix has too many dimensions, increase MAX_DIMENSIONS in config.h");
    o.sizes[o.dimensions++] = jalib::StringToX<int>(yytext);
  }
  [\n]                  {
    int n=1;
    for(int i=0; i<o.dimensions; ++i) n*=o.sizes[i];
    o.storage=new hecura::MatrixStorage(n);
    o.buf = o.storage->data();
    o.remaining = n;
    BEGIN(DATA);
  }
}

<DATA>{
  [ \r\t]+              //nothing
  [\n]                  //nothing
  [-]?[0-9]+[.]?[0-9]*[e]?[+-]?[0-9]* {
    JASSERT(o.remaining>0).Text("Buffer underflow while reading input matrix");
    *o.buf++ = jalib::StringToX<MATRIX_ELEMENT_T>(yytext);
    if(--o.remaining == 0){
      BEGIN(INITIAL);
      return 0;
    }
  }
}

<*>{
  . JASSERT(false)(yytext).Text("Unhandled input");
}

%%



