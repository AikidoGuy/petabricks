%option caseless
%option nostdinit
%option noyywrap
%option noyy_push_state
%option noyy_pop_state
%option noyy_top_state
%option nounput
%option interactive
%option always-interactive
%option prefix="maxima"
%option outfile="lex.yy.c"

%{

#include "formula.h"
#include "jassert.h"
#include "jconvert.h"
#include "maximaparser.h"
#include <stdio.h>

#define yylval maximalval
#define NUM_STR_BUFFERS 64

static const char* circularStringCache(const char* str){
  static std::string strbuffers[NUM_STR_BUFFERS];
  static int n = 0;
  return (strbuffers[n++ % NUM_STR_BUFFERS]=str).c_str();
}

#define YY_INPUT(buf,result,max_size) \
    result = read(fileno(maximain), buf, 1);

#define YY_USER_ACTION yylval.str=circularStringCache(yytext);
#define YY_DECL int yylex()

%}

%x output

PASS_CHARS [=<>,*/()[\]\n+-]
WS [ \r\n\t]

%%

<INITIAL>{
  [^()]+     /*nothing*/
  .          /*nothing*/
}

<output>{
  {WS}+               /* whitespace */
  "<="                return LE;
  ">="                return GE;
  "true"              return BOOL_T;
  "false"             return BOOL_F;
  "equal"             return STR_EQUAL;
  "ceiling"           return STR_CEILING;
  "floor"             return STR_FLOOR;
  {PASS_CHARS}        return yytext[0];
  [0-9]+              return INTEGER;
  [0-9]+[.][0-9]+     return FLOAT;
  [a-z_][a-z0-9_]*    return IDENT;
}

<*>{
  [(][%]o[0-9]+[)][ ] BEGIN(output);  return OPROMPT;
  [(][%]i[0-9]+[)][ ] BEGIN(INITIAL); return IPROMPT;
  .                   JASSERT(false)(yytext).Text("Unhandled input");
}

%%



