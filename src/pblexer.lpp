%option caseless
%option stack
%option yylineno
%option nostdinit
%option noyywrap
%option nounput
%option prefix="pb"
%option outfile="lex.yy.c"

%{
#include "transform.h"
#include "rule.h"
#include "formula.h"
#include "matrixdef.h"
#include "jassert.h"
#include "jconvert.h"
#include "pbparser.h"
#include <stdio.h>
#include <sstream>

#define NUM_STR_BUFFERS 64

static std::stringstream theParseLog;

static const char* circularStringCache(const char* str){
  static std::string strbuffers[NUM_STR_BUFFERS];
  static int n = 0;
  return (strbuffers[n++ % NUM_STR_BUFFERS]=str).c_str();
}

#define YY_USER_ACTION pblval.str=circularStringCache(yytext); theParseLog<<yytext;
#define YY_DECL int yylex()
#define RETURN theParseLog.str(""); return

%}

%x transform rule comment linecomment string

PASS_CHARS [.<>,*/()[\]+-]

%%
<INITIAL>{
  "main"           RETURN MAIN;
  "transform"      RETURN TRANSFORM;
  "through"        RETURN THROUGH;
  "to"             RETURN TO;
  "{"              yy_push_state(transform); RETURN '{';
}

<transform>{
  "where"          RETURN WHERE;
  "priority"       RETURN PRIORITY;
  "primary"        RETURN PRIMARY;
  "secondary"      RETURN SECONDARY;
  "rotatable"      RETURN ROTATABLE;
  "recursive"      RETURN RECURSIVE;
  "{"              yy_push_state(rule); RETURN *yytext;
  "}"              yy_pop_state();      RETURN *yytext;
}

<INITIAL,transform>{
  "from"           RETURN FROM;
  "<="             RETURN LE;
  ">="             RETURN GE;
  [0-9]+[.][0-9]+  RETURN FLOAT;
  [0-9]+           RETURN INTEGER;
  [a-z_][a-z0-9]*  RETURN IDENT;
  {PASS_CHARS}     RETURN yytext[0];
  [/][*]           yy_push_state(comment);
  [/][/]           yy_push_state(linecomment);
}

<rule>{
  [/][*]           yy_push_state(comment);
  [/][/]           yy_push_state(linecomment);
  "{"              yy_push_state(rule);
  ["]              yy_push_state(string);
  "}"              { 
                      yy_pop_state(); 
                      if(yy_top_state()!=rule){
                        pblval.str=circularStringCache(theParseLog.str().c_str());
                        RETURN RULEBODY;
                      }
                   }
  [^*/{}"]+        /*nothing*/
  .                /*nothing*/
}

<comment>{
  "*/"             yy_pop_state();
  [^*]+            /*nothing*/
  .                /*nothing*/
}

<linecomment>{
  [\n]           yy_pop_state();
  [^\n]+         /*nothing*/
}

<string>{
  ["]            yy_pop_state();
  [^"]           /*nothing*/
  [\\]["]        /*nothing*/
}

<*>{
  [ \t\r\n]      /* whitespace */;
  .              JASSERT(false)(yytext)(yylineno).Text("Unhandled input");
}

%%


