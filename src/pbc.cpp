/***************************************************************************
 *   Copyright (C) 2008 by Jason Ansel                                     *
 *   jansel@csail.mit.edu                                                  *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/types.h>
#include <fstream>

#include "jthread.h"
#include "jrefcounted.h"
#include "jfilesystem.h"
#include "matrix.h"
#include "matrixoperations.h"
#include "maximawrapper.h"
#include "transform.h"
#include "codegenerator.h"
#include "jfilesystem.h"

#ifdef HAVE_CONFIG_H
#  include "config.h"
#  include "cxxconfig.h"
#endif

void callCxxCompiler(const std::string& src, const std::string& bin);
std::string cmdCxxCompiler(const std::string& src, const std::string& bin);


using namespace petabricks;

//do dynamic searches for the correct paths to needed libraries/headers
const static std::string thePetabricksHPath       = jalib::Filesystem::FindHelperUtility("petabricks.h");
const static std::string theLibPetabricksPath     = jalib::Filesystem::FindHelperUtility("libpetabricks.a");
const static std::string theLibPetabricksMainPath = jalib::Filesystem::FindHelperUtility("libpetabricksmain.a");

TransformListPtr parsePbFile(const char* filename);

int main( int argc, const char ** argv){
  if(argc != 2){
    fprintf(stderr, PACKAGE " compiler (pbc) v" VERSION " " REVISION_SHORT "\n");
    fprintf(stderr, "USAGE: %s filename.pbcc\n", argv[0]);
    return 1;
  }
  std::string input = argv[1];
  std::string outputBin = jalib::Filesystem::Basename(input);
  std::string outputCode = outputBin + ".cpp";
  std::string outputInfo = outputBin + ".info";

  CodeGenerator::theFilePrefix() << "// Generated by " PACKAGE " compiler (pbc) v" VERSION " " REVISION_LONG "\n";
  CodeGenerator::theFilePrefix() << "// Compile with:\n";
  CodeGenerator::theFilePrefix() << "// " << cmdCxxCompiler(outputCode, outputBin) << "\n\n";
  CodeGenerator::theFilePrefix() << "#include \""+thePetabricksHPath+"\"\n";
  #ifdef SHORT_TYPE_NAMES
  CodeGenerator::theFilePrefix() <<"using namespace petabricks;\n\n";
  #endif

  TransformListPtr t = parsePbFile(input.c_str());

  for(TransformList::iterator i=t->begin(); i!=t->end(); ++i){
    JTRACE("initializing")(input)(outputCode)((*i)->name());
    (*i)->initialize();
    #ifdef DEBUG
    (*i)->print(std::cout);
    #endif
  }

  for(TransformList::iterator i=t->begin(); i!=t->end(); ++i){
    JTRACE("compiling")(input)(outputCode)((*i)->name());
    (*i)->compile();
  }

  std::ofstream of(outputCode.c_str());
  std::ofstream infofile(outputInfo.c_str());
  MainCodeGenerator o;
  for(TransformList::iterator i=t->begin(); i!=t->end(); ++i){
    JTRACE("generating")(input)(outputCode)((*i)->name());
    (*i)->generateCode(o);
  }

  //find the main transform
  std::string mainName = "";
  for(TransformList::const_iterator i=t->begin(); i!=t->end(); ++i){
    if((*i)->isMain()){
      JASSERT(mainName=="")(mainName)((*i)->name())
        .Text("Two transforms both have the 'main' keyword");
      mainName = (*i)->name();
    }
  }
  if(mainName=="") mainName = t->back()->name();

  o.comment("A hook called by PetabricksRuntime");
  o.beginFunc("petabricks::PetabricksRuntime::Main*", "petabricksMainTransform");
  o.write("return "+mainName+"_main::instance();");
  o.endFunc();
  
  o.comment("A hook called by PetabricksRuntime");
  o.beginFunc( "petabricks::PetabricksRuntime::Main*"
             , "petabricksFindTransform"
             , std::vector<std::string>(1, "const std::string& name"));
  for(TransformList::iterator i=t->begin(); i!=t->end(); ++i){
    (*i)->registerMainInterface(o);
  }
  o.write("return NULL;");
  o.endFunc();
  
  o.outputFileTo(of);
  of.flush();
  of.close();
  o.cg().dumpTo(infofile);
  infofile.flush();
  infofile.close();
  callCxxCompiler(outputCode, outputBin);

  JTRACE("done")(input)(outputInfo)(outputCode)(outputBin);
  return 0;
}

std::string cmdCxxCompiler(const std::string& src, const std::string& bin){
  std::string ofile = bin + ".o";
  return std::string()
       + "echo -n Calling C++ compiler...\\ && \\\n"
       + CXX " " CXXFLAGS " " DEFS " -c -o " + ofile + " " + src + " && \\\n"
       + "echo done && echo -n Linking...\\ && \\\n"
       + CXX " " CXXFLAGS " -o " + bin + " " + ofile + " " + theLibPetabricksMainPath+ " " + theLibPetabricksPath + " " LIBS " && \\\n"
       + "echo done";
}

void callCxxCompiler(const std::string& src, const std::string& bin){
  std::string cmd = cmdCxxCompiler(src,bin);
  JTRACE("Running g++")(cmd);
  //std::cout << cmd << std::endl;
  int rv = system(cmd.c_str());
  JASSERT(rv==0)(rv)(cmd).Text("g++ call failed");
}

