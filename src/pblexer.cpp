#line 2 "pblexer.cpp"

#line 4 "pblexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pb_create_buffer
#define yy_delete_buffer pb_delete_buffer
#define yy_flex_debug pb_flex_debug
#define yy_init_buffer pb_init_buffer
#define yy_flush_buffer pb_flush_buffer
#define yy_load_buffer_state pb_load_buffer_state
#define yy_switch_to_buffer pb_switch_to_buffer
#define yyin pbin
#define yyleng pbleng
#define yylex pblex
#define yylineno pblineno
#define yyout pbout
#define yyrestart pbrestart
#define yytext pbtext
#define yywrap pbwrap
#define yyalloc pballoc
#define yyrealloc pbrealloc
#define yyfree pbfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pbrestart(pbin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pbleng;

extern FILE *pbin, *pbout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pblex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-pblineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pbleng; ++yyl )\
                    if ( pbtext[yyl] == '\n' )\
                        --pblineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pbtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pbtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pbrestart()), so that the user can continue scanning by
	 * just pointing pbin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pbtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pbleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pbwrap()'s to do buffer switches
 * instead of setting up a fresh pbin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pbrestart (FILE *input_file  );
void pb_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pb_create_buffer (FILE *file,int size  );
void pb_delete_buffer (YY_BUFFER_STATE b  );
void pb_flush_buffer (YY_BUFFER_STATE b  );
void pbpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pbpop_buffer_state (void );

static void pbensure_buffer_stack (void );
static void pb_load_buffer_state (void );
static void pb_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pb_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pb_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pb_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pb_scan_bytes (yyconst char *bytes,int len  );

void *pballoc (yy_size_t  );
void *pbrealloc (void *,yy_size_t  );
void pbfree (void *  );

#define yy_new_buffer pb_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pbensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pb_create_buffer(pbin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pbensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pb_create_buffer(pbin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pbwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pbin = (FILE *) 0, *pbout = (FILE *) 0;

typedef int yy_state_type;

extern int pblineno;

int pblineno = 1;

extern char *pbtext;
#define yytext_ptr pbtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pbtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pbleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[233] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   16,   16,   59,   57,   56,   56,   57,   35,
       35,   33,   35,   57,   35,   34,   34,   34,   34,   34,
       34,   34,   34,   14,   38,   34,   34,   34,   34,   34,
       25,   26,   45,   45,   45,   43,   46,   46,   42,   44,
       41,   48,   48,   48,   49,   48,   51,   51,   50,   51,
       53,   53,   53,   52,   53,   53,   16,   16,   16,   57,
       16,   15,   36,   37,    0,   33,   29,   31,   30,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   27,   34,
       34,    0,   34,   34,   34,   34,   34,   45,   39,   40,

       45,   48,   47,   48,   51,   51,   54,   16,   17,   18,
       16,   32,   34,   34,   34,    5,   34,   34,   34,   34,
       34,   34,    0,   34,   34,   34,   34,   34,   45,   48,
       51,   16,   34,   34,   28,   34,    1,   34,   34,   34,
       34,   34,   55,   34,   34,   34,   34,   34,   34,   45,
       48,   51,   16,   34,   34,   34,    8,   34,   34,   34,
       34,   55,   34,   34,   34,   34,   34,   19,   45,   48,
       51,   16,   34,    7,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,    6,
       34,   10,   21,   34,   34,   34,   34,   34,   34,   34,

        3,   34,   20,   34,   34,   34,   34,    4,    9,    2,
       24,   23,   22,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   12,   34,   34,   34,   34,   11,   34,   34,
       13,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    1,    1,    8,
        8,    9,    8,    8,    8,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,   13,
       14,   15,    1,    1,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
        8,   17,    8,    8,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   16,   16,   28,   29,   30,
       31,   32,   16,   33,   34,   35,   36,   37,   38,   16,
       39,   16,   40,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    5,    1,
        3,    6,    1,    1,    1,    6,    1,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[249] =
    {   0,
        0,  366,   35,  365,   75,  115,   41,   49,   44,   59,
       85,   89,   94,  101,  370,  373,  373,  373,  329,  373,
       48,   62,  354,  353,  352,    0,  344,  333,  330,  339,
      342,  341,   99,  373,  355,  325,  100,  334,  325,  329,
      373,  373,    0,    0,    0,  373,  373,   72,  373,  373,
      350,    0,    0,    0,  342,  348,    0,    0,  373,  347,
      373,  373,  373,  373,  345,  345,    0,    0,    0,  307,
      343,  373,  373,  373,  334,   99,  373,  373,  373,    0,
      324,  314,  312,  312,  314,  307,  310,  305,    0,  318,
      306,  323,  307,  312,  297,  310,  307,    0,  373,  373,

      317,    0,  373,  316,    0,  315,  373,    0,  373,  373,
      314,  313,  288,  299,  293,  298,  290,  300,  286,  286,
      286,  296,  124,   81,  278,  294,  281,  278,  125,  129,
      130,  134,  277,  282,    0,  275,    0,  278,  278,  269,
      270,  283,    0,  283,  268,  267,  264,  268,  274,  140,
      141,    0,  145,  277,  270,  275,  270,  273,  266,  266,
      261,    0,  255,  260,  252,  256,  235,    0,  154,  144,
        0,  151,  226,    0,  204,  201,  195,  202,  162,  169,
      152,  155,  162,  168,  168,  147,  154,  161,  160,    0,
      149,    0,    0,  140,  141,  148,  142,  156,  140,  139,

        0,  142,    0,  147,  145,  128,  140,    0,    0,    0,
        0,    0,    0,  139,  141,  143,  131,  105,  106,   93,
       81,   86,    0,   73,   80,   64,   62,    0,   43,   43,
        0,  373,  195,  201,  207,  213,  219,   43,  225,  231,
      237,  243,  249,  255,  261,  267,  273,  279
    } ;

static yyconst flex_int16_t yy_def[249] =
    {   0,
      232,    1,    1,    3,  233,  233,  234,  234,  235,  235,
      236,  236,  237,  237,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  238,  238,  238,  238,  238,
      238,  238,  238,  232,  232,  238,  238,  238,  238,  238,
      232,  232,  239,  239,  239,  232,  232,  232,  232,  232,
      239,  240,  240,  240,  232,  240,  241,  241,  232,  241,
      232,  232,  232,  232,  232,  232,  242,  242,  242,  243,
      242,  232,  232,  232,  232,  232,  232,  232,  232,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  232,  238,  238,  238,  238,  238,  239,  232,  232,

      239,  240,  232,  240,  241,  241,  232,  242,  232,  232,
      242,  232,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  232,  238,  238,  238,  238,  238,  239,  240,
      241,  242,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  244,  238,  238,  238,  238,  238,  238,  245,
      246,  247,  248,  238,  238,  238,  238,  238,  238,  238,
      238,  244,  238,  238,  238,  238,  238,  238,  245,  246,
      247,  248,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,    0,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232
    } ;

static yyconst flex_int16_t yy_nxt[415] =
    {   0,
       16,   17,   18,   17,   16,   16,   19,   20,   20,   20,
       21,   22,   23,   24,   25,   26,   16,   26,   27,   26,
       28,   26,   26,   29,   30,   26,   26,   26,   31,   26,
       26,   32,   26,   26,   33,   26,   26,   26,   26,   34,
       16,   16,   53,   54,   53,   58,   59,   58,   80,   55,
       53,   54,   53,   26,   56,   26,   73,   55,   74,   26,
       58,   59,   58,   26,   60,  231,   36,   37,   38,   39,
      230,   75,   40,   76,   41,   42,   44,   45,   44,   46,
       99,  229,  100,   47,  228,   48,   62,   63,   62,   64,
       62,   63,   62,   64,   66,   68,   69,   68,  227,  226,

       70,   65,   68,   69,   68,   65,   71,   70,   75,  144,
       76,  145,  225,  224,   49,   50,   44,   45,   44,   46,
       51,   87,   94,   47,   88,   48,  223,  143,  150,   89,
       95,   90,  151,  152,   91,  123,  129,  153,  222,  221,
      130,  131,   98,  102,  162,  132,  102,  108,  162,  162,
      162,  162,  162,  108,   49,   50,   98,  162,  162,  214,
      220,  219,  162,  218,  162,  217,  213,  212,  215,  211,
      210,  209,  208,  207,  206,  205,  216,  204,  203,  162,
      162,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  162,  162,   43,   43,   43,   43,   43,

       43,   52,   52,   52,   52,   52,   52,   57,   57,   57,
       57,   57,   57,   61,   61,   61,   61,   61,   61,   67,
       67,   67,   67,   67,   67,   98,   98,  190,   98,  189,
       98,  102,  102,  102,  102,  188,  102,  105,  187,  105,
      105,  105,  105,  108,  108,  108,  186,  108,  108,  109,
      109,  109,  109,  109,  109,  162,  185,  162,  162,  162,
      162,  169,  169,  169,  169,  169,  169,  170,  170,  170,
      170,  170,  170,  171,  184,  171,  171,  171,  171,  172,
      172,  172,  172,  172,  172,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  168,  167,  166,  165,

      164,  163,  161,  160,  159,  158,  157,  156,  155,  154,
      149,  148,  147,  146,  142,  141,  140,  139,  138,  137,
      136,  135,  134,  133,  112,  132,  131,  130,  129,  128,
      127,  126,  125,  124,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,   92,  107,
      106,  104,  103,  101,   97,   89,   96,   93,   92,   86,
       85,   84,   83,   82,   81,   79,   78,   77,   72,  232,
       35,   35,   15,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232
    } ;

static yyconst flex_int16_t yy_chk[415] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    7,    7,    7,    9,    9,    9,  238,    7,
        8,    8,    8,    3,    8,    3,   21,    8,   21,    3,
       10,   10,   10,    3,   10,  230,    3,    3,    3,    3,
      229,   22,    3,   22,    3,    3,    5,    5,    5,    5,
       48,  227,   48,    5,  226,    5,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   13,   13,   13,  225,  224,

       13,   11,   14,   14,   14,   12,   14,   14,   76,  124,
       76,  124,  222,  221,    5,    5,    6,    6,    6,    6,
        6,   33,   37,    6,   33,    6,  220,  123,  129,   33,
       37,   33,  130,  131,   33,  123,  129,  132,  219,  218,
      130,  131,  150,  151,  150,  132,  170,  153,  150,  151,
      150,  153,  170,  172,    6,    6,  169,  172,  169,  207,
      217,  216,  169,  215,  169,  214,  206,  205,  207,  204,
      202,  200,  199,  198,  197,  196,  207,  195,  194,  150,
      150,  191,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179,  169,  169,  233,  233,  233,  233,  233,

      233,  234,  234,  234,  234,  234,  234,  235,  235,  235,
      235,  235,  235,  236,  236,  236,  236,  236,  236,  237,
      237,  237,  237,  237,  237,  239,  239,  178,  239,  177,
      239,  240,  240,  240,  240,  176,  240,  241,  175,  241,
      241,  241,  241,  242,  242,  242,  173,  242,  242,  243,
      243,  243,  243,  243,  243,  244,  167,  244,  244,  244,
      244,  245,  245,  245,  245,  245,  245,  246,  246,  246,
      246,  246,  246,  247,  166,  247,  247,  247,  247,  248,
      248,  248,  248,  248,  248,  165,  164,  163,  161,  160,
      159,  158,  157,  156,  155,  154,  149,  148,  147,  146,

      145,  144,  142,  141,  140,  139,  138,  136,  134,  133,
      128,  127,  126,  125,  122,  121,  120,  119,  118,  117,
      116,  115,  114,  113,  112,  111,  106,  104,  101,   97,
       96,   95,   94,   93,   92,   91,   90,   88,   87,   86,
       85,   84,   83,   82,   81,   75,   71,   70,   66,   65,
       60,   56,   55,   51,   40,   39,   38,   36,   35,   32,
       31,   30,   29,   28,   27,   25,   24,   23,   19,   15,
        4,    2,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[59] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pb_flex_debug;
int pb_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pbtext;
#line 1 "pblexer.lpp"
#line 11 "pblexer.lpp"
#include "transform.h"
#include "userrule.h"
#include "formula.h"
#include "matrixdef.h"
#include "jassert.h"
#include "jconvert.h"
#include "pbparser.h"
#include "codegenerator.h"
#include <stdio.h>
#include <string>
#include <sstream>

using namespace std;

#define NUM_STR_BUFFERS 64

static std::stringstream theParseLog;

static const char* circularStringCache(const char* str){
  static std::string strbuffers[NUM_STR_BUFFERS];
  static int n = 0;
  return (strbuffers[n++ % NUM_STR_BUFFERS]=str).c_str();
}

static void recordLitCode(){
  std::string str = theParseLog.str().c_str();
  theParseLog.str("");
  petabricks::CodeGenerator::theFilePrefix() << std::string(str.begin(), str.end()-2);
}

int rulebodystart=0;
std::string pbfilename;

static void handleCppLine(const char* s){
  const char* n_begin = s+2;
  const char* n_end = n_begin;
  while(*n_end>='0' && *n_end<='9') ++n_end;
  const char* filename=n_end+1;
  std::string n(n_begin, n_end);
  //JTRACE("LINENO")(n)(filename);
  pblineno = jalib::StringToInt(n)-1;
  pbfilename = filename;
}

#define YY_USER_ACTION pblval.str=circularStringCache(pbtext); theParseLog<<pbtext;
#define YY_DECL int pblex()
#define RETURN theParseLog.str(""); return

static int theNestCount=0;


#line 724 "pblexer.cpp"

#define INITIAL 0
#define transform 1
#define rule 2
#define comment 3
#define linecomment 4
#define string 5
#define litcode 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pblex_destroy (void );

int pbget_debug (void );

void pbset_debug (int debug_flag  );

YY_EXTRA_TYPE pbget_extra (void );

void pbset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pbget_in (void );

void pbset_in  (FILE * in_str  );

FILE *pbget_out (void );

void pbset_out  (FILE * out_str  );

int pbget_leng (void );

char *pbget_text (void );

int pbget_lineno (void );

void pbset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pbwrap (void );
#else
extern int pbwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pbtext, pbleng, 1, pbout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pbin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pbin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pbin))==0 && ferror(pbin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pbin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pblex (void);

#define YY_DECL int pblex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pbtext and pbleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pbleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pbtext[pbleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 67 "pblexer.lpp"

#line 928 "pblexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pbin )
			pbin = stdin;

		if ( ! pbout )
			pbout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pbensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pb_create_buffer(pbin,YY_BUF_SIZE );
		}

		pb_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pbtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 233 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 373 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < pbleng; ++yyl )
				if ( pbtext[yyl] == '\n' )
					   
    pblineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "pblexer.lpp"
RETURN KW_MAIN;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "pblexer.lpp"
RETURN KW_TRANSFORM;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "pblexer.lpp"
RETURN KW_TEMPLATE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "pblexer.lpp"
RETURN KW_GENERATOR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "pblexer.lpp"
RETURN KW_GENERATOR;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "pblexer.lpp"
RETURN KW_THROUGH;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "pblexer.lpp"
RETURN KW_CONFIG;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "pblexer.lpp"
RETURN KW_PARAM;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "pblexer.lpp"
RETURN KW_PARAM;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "pblexer.lpp"
RETURN KW_TUNABLE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "pblexer.lpp"
RETURN KW_ACCURACYMETRIC;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "pblexer.lpp"
RETURN KW_ACCURACYBINS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "pblexer.lpp"
RETURN KW_ACCURACYVARIABLE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "pblexer.lpp"
yy_push_state(transform); RETURN '{';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "pblexer.lpp"
yy_push_state(litcode); theParseLog.str("");
	YY_BREAK


case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 87 "pblexer.lpp"
/*nothing*/
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 88 "pblexer.lpp"
/*nothing*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "pblexer.lpp"
{
      yy_pop_state();
      recordLitCode();
  }
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 96 "pblexer.lpp"
RETURN KW_WHERE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 97 "pblexer.lpp"
RETURN KW_PRIORITY;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 98 "pblexer.lpp"
RETURN KW_PRIMARY;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 99 "pblexer.lpp"
RETURN KW_SECONDARY;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 100 "pblexer.lpp"
RETURN KW_ROTATABLE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "pblexer.lpp"
RETURN KW_RECURSIVE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "pblexer.lpp"
{
                     yy_push_state(rule); 
                     theNestCount=1; 
                     theParseLog.str("");
                     theParseLog << "# " << pblineno << " " << pbfilename << "\n";
                     return *pbtext;
                   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 109 "pblexer.lpp"
yy_pop_state();      RETURN *pbtext;
	YY_BREAK


case 27:
YY_RULE_SETUP
#line 113 "pblexer.lpp"
RETURN KW_TO;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 114 "pblexer.lpp"
RETURN KW_FROM;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 115 "pblexer.lpp"
RETURN KW_LE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 116 "pblexer.lpp"
RETURN KW_GE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 117 "pblexer.lpp"
RETURN KW_EQ;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 118 "pblexer.lpp"
RETURN TOK_FLOAT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 119 "pblexer.lpp"
RETURN TOK_INTEGER;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 120 "pblexer.lpp"
RETURN IDENT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 121 "pblexer.lpp"
RETURN pbtext[0];
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 122 "pblexer.lpp"
yy_push_state(comment);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 123 "pblexer.lpp"
yy_push_state(linecomment);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 124 "pblexer.lpp"
yy_push_state(linecomment);
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 128 "pblexer.lpp"
yy_push_state(comment);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 129 "pblexer.lpp"
yy_push_state(linecomment);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 130 "pblexer.lpp"
yy_push_state(linecomment);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 131 "pblexer.lpp"
++theNestCount;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 132 "pblexer.lpp"
yy_push_state(string);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 133 "pblexer.lpp"
{ 
                      if(--theNestCount==0){
                        yy_pop_state();
                        pblval.str=circularStringCache(theParseLog.str().c_str());
                        RETURN TOK_RULEBODY;
                      }
                   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 140 "pblexer.lpp"
/*nothing*/
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 141 "pblexer.lpp"
/*nothing*/
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 145 "pblexer.lpp"
yy_pop_state();
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 146 "pblexer.lpp"
/*nothing*/
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "pblexer.lpp"
/*nothing*/
	YY_BREAK


case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 151 "pblexer.lpp"
yy_pop_state();
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 152 "pblexer.lpp"
/*nothing*/
	YY_BREAK


case 52:
YY_RULE_SETUP
#line 156 "pblexer.lpp"
yy_pop_state();
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 157 "pblexer.lpp"
/*nothing*/
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 158 "pblexer.lpp"
/*nothing*/
	YY_BREAK


case 55:
YY_RULE_SETUP
#line 162 "pblexer.lpp"
handleCppLine(pbtext);
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 163 "pblexer.lpp"
/* whitespace */;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "pblexer.lpp"
JASSERT(false)(pbtext)(pblineno).Text("Unhandled input");
	YY_BREAK

case 58:
YY_RULE_SETUP
#line 167 "pblexer.lpp"
ECHO;
	YY_BREAK
#line 1351 "pblexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(transform):
case YY_STATE_EOF(rule):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(linecomment):
case YY_STATE_EOF(string):
case YY_STATE_EOF(litcode):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pbin at a new source and called
			 * pblex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pbin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pbwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pbtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pblex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pbrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pbrestart(pbin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pbrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 233 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 233 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 232);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pbrestart(pbin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pbwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pbtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    pblineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pbrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pbensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pb_create_buffer(pbin,YY_BUF_SIZE );
	}

	pb_init_buffer(YY_CURRENT_BUFFER,input_file );
	pb_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pb_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pbpop_buffer_state();
	 *		pbpush_buffer_state(new_buffer);
     */
	pbensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pb_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pbwrap()) processing, but the only time this flag
	 * is looked at is after pbwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pb_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pbin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pb_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pballoc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pb_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pballoc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pb_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pb_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pb_create_buffer()
 * 
 */
    void pb_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pbfree((void *) b->yy_ch_buf  );

	pbfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pbrestart() or at EOF.
 */
    static void pb_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pb_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pb_init_buffer was _probably_
     * called from pbrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pb_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pb_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pbpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pbensure_buffer_stack();

	/* This block is copied from pb_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pb_switch_to_buffer. */
	pb_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pbpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pb_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pb_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pbensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pballoc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pbensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pbrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pbensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pb_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pballoc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pb_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pb_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pblex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pb_scan_bytes() instead.
 */
YY_BUFFER_STATE pb_scan_string (yyconst char * yystr )
{
    
	return pb_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pblex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pb_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pballoc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pb_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pb_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pb_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) pballoc(new_size  );

		else
			(yy_start_stack) = (int *) pbrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pbtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pbtext[pbleng] = (yy_hold_char); \
		(yy_c_buf_p) = pbtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pbleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pbget_lineno  (void)
{
        
    return pblineno;
}

/** Get the input stream.
 * 
 */
FILE *pbget_in  (void)
{
        return pbin;
}

/** Get the output stream.
 * 
 */
FILE *pbget_out  (void)
{
        return pbout;
}

/** Get the length of the current token.
 * 
 */
int pbget_leng  (void)
{
        return pbleng;
}

/** Get the current token.
 * 
 */

char *pbget_text  (void)
{
        return pbtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pbset_lineno (int  line_number )
{
    
    pblineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pb_switch_to_buffer
 */
void pbset_in (FILE *  in_str )
{
        pbin = in_str ;
}

void pbset_out (FILE *  out_str )
{
        pbout = out_str ;
}

int pbget_debug  (void)
{
        return pb_flex_debug;
}

void pbset_debug (int  bdebug )
{
        pb_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pblex_destroy(), so don't allocate here.
     */

    /* We do not touch pblineno unless the option is enabled. */
    pblineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    pbin = stdin;
    pbout = stdout;
#else
    pbin = (FILE *) 0;
    pbout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pblex_init()
     */
    return 0;
}

/* pblex_destroy is for both reentrant and non-reentrant scanners. */
int pblex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pb_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pbpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pbfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        pbfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pblex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pballoc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pbrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pbfree (void * ptr )
{
	free( (char *) ptr );	/* see pbrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 167 "pblexer.lpp"





