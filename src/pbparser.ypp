%{
#include <stdio.h>
#include <map>
#include "jconvert.h"
#include "transform.h"
#include "rule.h"
#include "formula.h"
#include "matrixdef.h"
#include "region.h"
#include "config.h"
#include "cxxconfig.h"
using namespace hecura;

extern int pblineno;
extern char* pbtext;
extern int pblex (void);
extern std::string pbfilename;

int yyerror(hecura::TransformListPtr&, const char* msg){
  JASSERT(false)(pbfilename)(pblineno)(pbtext)(msg).Text("parse error"); return 0;
}

static jalib::JRefPool theRefPool;
#define REFALLOC(args...) (theRefPool.add(new args))

static void clearParserCaches(){
  theRefPool.clear();
}

%}

%defines
%locations
%expect 0
%name-prefix="pb"

%union {
  int i;
  double d;
  const char* str;
  hecura::Transform*      transform;
  hecura::TransformList*  transforms;
  hecura::MatrixDef*      matrixdef;
  hecura::MatrixDefList*  matrixdefs;
  hecura::Rule*           rule;
  hecura::RuleList*       rules;
  hecura::Formula*        formula;
  hecura::FormulaList*    formulas;
  hecura::Region*         region;
  hecura::RegionList*     regions;
  hecura::TestCase*       testcase;
  struct { const char* str; hecura::FormulaList* formulas; } str_formulas; 
}

%start Start

%parse-param { hecura::TransformListPtr& ret };
%initial-action {
  theRefPool.clear();
}

%token TRANSFORM FROM TO THROUGH LE GE WHERE ROTATABLE PRIMARY SECONDARY PRIORITY MAIN RECURSIVE TESTCASE
%token <str> INTEGER FLOAT IDENT RULEBODY
%type <str> RuleBody
%type <i> Integer PriorityFlag
%type <d> Float
%type <transform> Transform TransformHeader TransformName TransformFrom TransformThrough TransformTo TransformTest
%type <transforms> TransformList
%type <rules> TransformBody RuleList
%type <rule> Rule RuleHeader BaseRuleHeader
%type <matrixdefs> MatrixDefList
%type <matrixdef>  MatrixDef
%type <formulas>   OptFormulaList FormulaList OptSize OptVersion OptWhere
%type <formula>    Formula FormulaExpr FormulaRelation
%type <region>     Region NamedRegion
%type <regions>    NamedRegionList RuleHeaderFrom RuleHeaderTo
%type <testcase>   TestCase
%type <str_formulas> RegionAccessor

%nonassoc '=' '<' '>' LE GE
%left '-' '+'
%left '*' '/'
%left '^'

%%

Start: TransformList {
  ret = $1;
  clearParserCaches();
};


Transform: TransformHeader TransformBody {
   ($$=$1)->setRules(*$2); 
   JTRACE("parsed Transform")($$->name()); 
};

TransformHeader: TransformName      {$$=$1;}
               | TransformFrom      {$$=$1;}
               | TransformThrough   {$$=$1;}
               | TransformTo        {$$=$1;}
               | TransformTest      {$$=$1;};

TransformName:    TRANSFORM IDENT OptSemiCol      { $$=REFALLOC(Transform($2)); }
             |    MAIN TRANSFORM IDENT OptSemiCol { $$=REFALLOC(Transform($3)); $$->markMain();  };
TransformFrom:    TransformHeader FROM     MatrixDefList OptSemiCol { ($$=$1)->addFrom(*$3);     };
TransformThrough: TransformHeader THROUGH  MatrixDefList OptSemiCol { ($$=$1)->addThrough(*$3);  };
TransformTo:      TransformHeader TO       MatrixDefList OptSemiCol { ($$=$1)->addTo(*$3);       };
TransformTest:    TransformHeader TESTCASE TestCase OptSemiCol      { ($$=$1)->addTestCase($3); };

TestCase: Nil            { $$=REFALLOC(TestCase()); }
        | TestCase IDENT { ($$=$1)->addMatrix($2); };

MatrixDef: IDENT OptVersion OptSize { $$=REFALLOC(MatrixDef($1,*$2,*$3)); };

OptVersion: Nil                          { ($$=REFALLOC(FormulaList())); }
          | '<' Formula              '>' { ($$=REFALLOC(FormulaList()))->push_back($2); }
          | '<' Formula Dots Formula '>' 
{ 
  $$=REFALLOC(FormulaList()); 
  $$->push_back($2);
  $$->push_back($4);
};

OptSize: Nil                 { $$=REFALLOC(FormulaList()); }
       | '[' FormulaList ']' { $$=$2; };

Formula: IDENT   {$$=REFALLOC( FormulaVariable($1) ); }
       | Integer {$$=REFALLOC( FormulaInteger( $1) ); }
       | Float   {$$=REFALLOC( FormulaFloat(  $1) );  }
       | '(' Formula ')' { $$=$2; } 
       | FormulaExpr     { $$=$1; };

FormulaExpr: Formula '+' Formula { $$=REFALLOC(FormulaBinop<'+'>($1,$3)); }
           | Formula '-' Formula { $$=REFALLOC(FormulaBinop<'-'>($1,$3)); }
           | Formula '*' Formula { $$=REFALLOC(FormulaBinop<'*'>($1,$3)); }
           | Formula '/' Formula { $$=REFALLOC(FormulaBinop<'/'>($1,$3)); }
           | Formula '^' Formula { $$=REFALLOC(FormulaBinop<'^'>($1,$3)); }
           | '-' Formula { $$=REFALLOC(FormulaBinop<'-'>(FormulaInteger::zero(),$2)); };

FormulaRelation: Formula '=' Formula { $$=REFALLOC(FormulaBinop<'='>($1,$3)); }
               | Formula '<' Formula { $$=REFALLOC(FormulaBinop<'<'>($1,$3)); }
               | Formula '>' Formula { $$=REFALLOC(FormulaBinop<'>'>($1,$3)); }
               | Formula LE  Formula { $$=REFALLOC(FormulaLE($1,$3)); }
               | Formula GE  Formula { $$=REFALLOC(FormulaGE($1,$3)); };


TransformBody: '{' RuleList '}' { $$=$2; };

Rule: RuleHeader RuleBody OptSemiCol { ($$=$1)->setBody($2); JTRACE("parsed Rule"); };

RuleHeader: BaseRuleHeader          { $$=$1; }
          | PriorityFlag RuleHeader { ($$=$2)->setPriority($1); }
          | ROTATABLE    RuleHeader { ($$=$2)->addRotations(RuleFlags::ROTATE); }
          | RECURSIVE    RuleHeader { ($$=$2)->markRecursive(); };

BaseRuleHeader: Region       RuleHeaderFrom OptWhere { $$=REFALLOC(Rule($1,  *$2, *$3)); }
              | RuleHeaderTo RuleHeaderFrom OptWhere { $$=REFALLOC(Rule(*$1, *$2, *$3)); };

RuleHeaderFrom: FROM '(' NamedRegionList ')' { $$=$3; };
RuleHeaderTo:   TO   '(' NamedRegionList ')' { $$=$3; };

PriorityFlag: PRIMARY                  {$$=RuleFlags::PRIORITY_PRIMARY;}
            | SECONDARY                {$$=RuleFlags::PRIORITY_SECONDARY;}
            | PRIORITY '(' Integer ')' {$$=$3;};

RuleBody: '{' RULEBODY /*'}'*/ { $$=$2; }; // } is handled by lexer

OptWhere: Nil                     { $$=REFALLOC(FormulaList()); }
        | 'WHERE' FormulaRelation { ($$=REFALLOC(FormulaList()))->push_back($2); };

Region: IDENT OptVersion RegionAccessor { $$=REFALLOC(Region($1,*$2, $3.str,*$3.formulas)); };

RegionAccessor: '.' IDENT '(' OptFormulaList ')' { $$.str=$2; $$.formulas=$4;}
              | Nil { $$.str="all"; $$.formulas=REFALLOC(FormulaList());};

NamedRegion: Region IDENT { ($$=$1)->setName($2); };

Dots: '.' '.' |  '.' '.' '.' ;
Nil:;
OptSemiCol : ';' OptSemiCol | Nil;
Integer: INTEGER { $$=     jalib::StringToX<int>($1); };
Float:   FLOAT   { $$=jalib::StringToX<double>($1); };

RuleList: Rule          { ($$=REFALLOC(RuleList()))->push_back($1); }
        | RuleList Rule { ($$=$1)->push_back($2); };

TransformList: Transform               { ($$=REFALLOC(TransformList()))->push_back($1); }
             | TransformList Transform { ($$=$1)->push_back($2); };

MatrixDefList: MatrixDef                   { ($$=REFALLOC(MatrixDefList()))->push_back($1); }
             | MatrixDefList ',' MatrixDef { ($$=$1)->push_back($3);                      };

FormulaList: Formula                 { ($$=REFALLOC(FormulaList()))->push_back($1); }
           | FormulaList ',' Formula { ($$=$1)->push_back($3); };

NamedRegionList: Nil                             { ($$=REFALLOC(RegionList())); }
               | NamedRegion                     { ($$=REFALLOC(RegionList()))->push_back($1); }
               | NamedRegionList ',' NamedRegion { ($$=$1)->push_back($3); };


OptFormulaList: Nil         { $$=REFALLOC(FormulaList()); }
              | FormulaList { $$=$1; };


%%

extern FILE* pbin;

TransformListPtr parsePbFile(const char* filename){
  TransformListPtr ret;
#ifdef RUN_CPP
  pbin = popen((std::string(CPP " ")+filename).c_str(),"r");
#else
  pbin = fopen(filename,"r");
#endif
  JASSERT(pbin!=NULL)(filename)(JASSERT_ERRNO).Text("failed to open file");
  pbparse(ret);
  return ret;
}


